// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/worker/worker.go
//
// Generated by this command:
//
//	mockgen -source=./internal/worker/worker.go -destination=./internal/testutils/mocks/worker.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/notifique/shared/dto"
	providers "github.com/notifique/worker/internal/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockUserInfoProvider is a mock of UserInfoProvider interface.
type MockUserInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoProviderMockRecorder
	isgomock struct{}
}

// MockUserInfoProviderMockRecorder is the mock recorder for MockUserInfoProvider.
type MockUserInfoProviderMockRecorder struct {
	mock *MockUserInfoProvider
}

// NewMockUserInfoProvider creates a new mock instance.
func NewMockUserInfoProvider(ctrl *gomock.Controller) *MockUserInfoProvider {
	mock := &MockUserInfoProvider{ctrl: ctrl}
	mock.recorder = &MockUserInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoProvider) EXPECT() *MockUserInfoProviderMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserInfoProvider) GetUserInfo(ctx context.Context, userID string) (providers.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(providers.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserInfoProviderMockRecorder) GetUserInfo(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserInfoProvider)(nil).GetUserInfo), ctx, userID)
}

// MockNotificationInfoProvider is a mock of NotificationInfoProvider interface.
type MockNotificationInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationInfoProviderMockRecorder
	isgomock struct{}
}

// MockNotificationInfoProviderMockRecorder is the mock recorder for MockNotificationInfoProvider.
type MockNotificationInfoProviderMockRecorder struct {
	mock *MockNotificationInfoProvider
}

// NewMockNotificationInfoProvider creates a new mock instance.
func NewMockNotificationInfoProvider(ctrl *gomock.Controller) *MockNotificationInfoProvider {
	mock := &MockNotificationInfoProvider{ctrl: ctrl}
	mock.recorder = &MockNotificationInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationInfoProvider) EXPECT() *MockNotificationInfoProviderMockRecorder {
	return m.recorder
}

// GetDistributionListRecipients mocks base method.
func (m *MockNotificationInfoProvider) GetDistributionListRecipients(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionListRecipients", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionListRecipients indicates an expected call of GetDistributionListRecipients.
func (mr *MockNotificationInfoProviderMockRecorder) GetDistributionListRecipients(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionListRecipients", reflect.TypeOf((*MockNotificationInfoProvider)(nil).GetDistributionListRecipients), ctx, name)
}

// GetNotificationStatus mocks base method.
func (m *MockNotificationInfoProvider) GetNotificationStatus(ctx context.Context, notificationID string) (dto.NotificationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatus", ctx, notificationID)
	ret0, _ := ret[0].(dto.NotificationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatus indicates an expected call of GetNotificationStatus.
func (mr *MockNotificationInfoProviderMockRecorder) GetNotificationStatus(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatus", reflect.TypeOf((*MockNotificationInfoProvider)(nil).GetNotificationStatus), ctx, notificationID)
}

// GetNotificationTemplate mocks base method.
func (m *MockNotificationInfoProvider) GetNotificationTemplate(ctx context.Context, templateId string) (dto.NotificationTemplateDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationTemplate", ctx, templateId)
	ret0, _ := ret[0].(dto.NotificationTemplateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationTemplate indicates an expected call of GetNotificationTemplate.
func (mr *MockNotificationInfoProviderMockRecorder) GetNotificationTemplate(ctx, templateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationTemplate", reflect.TypeOf((*MockNotificationInfoProvider)(nil).GetNotificationTemplate), ctx, templateId)
}

// GetRecipientNotificationStatuses mocks base method.
func (m *MockNotificationInfoProvider) GetRecipientNotificationStatuses(ctx context.Context, filter providers.StatusFilters) ([]dto.RecipientNotificationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientNotificationStatuses", ctx, filter)
	ret0, _ := ret[0].([]dto.RecipientNotificationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipientNotificationStatuses indicates an expected call of GetRecipientNotificationStatuses.
func (mr *MockNotificationInfoProviderMockRecorder) GetRecipientNotificationStatuses(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientNotificationStatuses", reflect.TypeOf((*MockNotificationInfoProvider)(nil).GetRecipientNotificationStatuses), ctx, filter)
}

// MockNotificationInfoUpdater is a mock of NotificationInfoUpdater interface.
type MockNotificationInfoUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationInfoUpdaterMockRecorder
	isgomock struct{}
}

// MockNotificationInfoUpdaterMockRecorder is the mock recorder for MockNotificationInfoUpdater.
type MockNotificationInfoUpdaterMockRecorder struct {
	mock *MockNotificationInfoUpdater
}

// NewMockNotificationInfoUpdater creates a new mock instance.
func NewMockNotificationInfoUpdater(ctrl *gomock.Controller) *MockNotificationInfoUpdater {
	mock := &MockNotificationInfoUpdater{ctrl: ctrl}
	mock.recorder = &MockNotificationInfoUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationInfoUpdater) EXPECT() *MockNotificationInfoUpdaterMockRecorder {
	return m.recorder
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationInfoUpdater) UpdateNotificationStatus(ctx context.Context, log dto.NotificationStatusLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationInfoUpdaterMockRecorder) UpdateNotificationStatus(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationInfoUpdater)(nil).UpdateNotificationStatus), ctx, log)
}

// UpdateRecipientNotificationStatus mocks base method.
func (m *MockNotificationInfoUpdater) UpdateRecipientNotificationStatus(ctx context.Context, notificationID string, batch []dto.RecipientNotificationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipientNotificationStatus", ctx, notificationID, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecipientNotificationStatus indicates an expected call of UpdateRecipientNotificationStatus.
func (mr *MockNotificationInfoUpdaterMockRecorder) UpdateRecipientNotificationStatus(ctx, notificationID, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipientNotificationStatus", reflect.TypeOf((*MockNotificationInfoUpdater)(nil).UpdateRecipientNotificationStatus), ctx, notificationID, batch)
}

// MockQueueConsumer is a mock of QueueConsumer interface.
type MockQueueConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueConsumerMockRecorder
	isgomock struct{}
}

// MockQueueConsumerMockRecorder is the mock recorder for MockQueueConsumer.
type MockQueueConsumerMockRecorder struct {
	mock *MockQueueConsumer
}

// NewMockQueueConsumer creates a new mock instance.
func NewMockQueueConsumer(ctrl *gomock.Controller) *MockQueueConsumer {
	mock := &MockQueueConsumer{ctrl: ctrl}
	mock.recorder = &MockQueueConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueConsumer) EXPECT() *MockQueueConsumerMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockQueueConsumer) Ack(ctx context.Context, deleteTag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, deleteTag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockQueueConsumerMockRecorder) Ack(ctx, deleteTag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockQueueConsumer)(nil).Ack), ctx, deleteTag)
}

// MockInAppSender is a mock of InAppSender interface.
type MockInAppSender struct {
	ctrl     *gomock.Controller
	recorder *MockInAppSenderMockRecorder
	isgomock struct{}
}

// MockInAppSenderMockRecorder is the mock recorder for MockInAppSender.
type MockInAppSenderMockRecorder struct {
	mock *MockInAppSender
}

// NewMockInAppSender creates a new mock instance.
func NewMockInAppSender(ctrl *gomock.Controller) *MockInAppSender {
	mock := &MockInAppSender{ctrl: ctrl}
	mock.recorder = &MockInAppSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInAppSender) EXPECT() *MockInAppSenderMockRecorder {
	return m.recorder
}

// SendNotifications mocks base method.
func (m *MockInAppSender) SendNotifications(ctx context.Context, batch []dto.UserNotificationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotifications", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotifications indicates an expected call of SendNotifications.
func (mr *MockInAppSenderMockRecorder) SendNotifications(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotifications", reflect.TypeOf((*MockInAppSender)(nil).SendNotifications), ctx, batch)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendNotifications mocks base method.
func (m *MockEmailSender) SendNotifications(ctx context.Context, batch []dto.UserEmailNotificationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotifications", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotifications indicates an expected call of SendNotifications.
func (mr *MockEmailSenderMockRecorder) SendNotifications(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotifications", reflect.TypeOf((*MockEmailSender)(nil).SendNotifications), ctx, batch)
}
