// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/notifique/shared/dto"
	"github.com/notifique/worker/internal/consumers"
	"github.com/notifique/worker/internal/testutils/consumers"
	"github.com/notifique/worker/internal/testutils/containers"
	"github.com/notifique/worker/internal/testutils/mocks"
	"github.com/notifique/worker/internal/worker"
	"go.uber.org/mock/gomock"
)

// Injectors from wire.go:

func InjectRabbitMQConsumerIntegrationTest(ctx context.Context, notificationChan chan<- dto.NotificationMsg) (*consumers_test.RabbitMQ, func(), error) {
	rabbitMQConsumerContainer, cleanup, err := containers_test.NewRabbitMQConsumerContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQ := rabbitMQConsumerContainer.Client
	string2 := rabbitMQConsumerContainer.Queue
	rabbitMQCfg := consumers.RabbitMQCfg{
		Client:           rabbitMQ,
		Queue:            string2,
		NotificationChan: notificationChan,
	}
	consumers_testRabbitMQCfg := consumers_test.RabbitMQCfg{
		RabbitMQCfg: rabbitMQCfg,
		Client:      rabbitMQ,
	}
	consumers_testRabbitMQ, err := consumers_test.NewRabbitMQConsumerTest(ctx, consumers_testRabbitMQCfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return consumers_testRabbitMQ, func() {
		cleanup()
	}, nil
}

func InjectSQSConsumerIntegrationTest(ctx context.Context, notificationChan chan<- dto.NotificationMsg) (*consumers_test.SQS, func(), error) {
	sqsConsumerContainer, cleanup, err := containers_test.NewSQSConsumerContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsQueueCfg := sqsConsumerContainer.QueueCfg
	client := sqsConsumerContainer.Client
	sqsCfg := consumers.SQSCfg{
		QueueCfg:    sqsQueueCfg,
		Client:      client,
		MessageChan: notificationChan,
	}
	consumers_testSQSCfg := consumers_test.SQSCfg{
		SQSCfg: sqsCfg,
		Client: client,
	}
	sqs, err := consumers_test.NewSQSConsumerTest(ctx, consumers_testSQSCfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return sqs, func() {
		cleanup()
	}, nil
}

func InjectMockedWorkerIntegrationTest(ctx context.Context, mockController *gomock.Controller, notificationChan <-chan dto.NotificationMsg) *MockedWorkerScenario {
	mockNotificationInfoProvider := mocks.NewMockNotificationInfoProvider(mockController)
	mockNotificationInfoUpdater := mocks.NewMockNotificationInfoUpdater(mockController)
	mockUserInfoProvider := mocks.NewMockUserInfoProvider(mockController)
	mockQueueConsumer := mocks.NewMockQueueConsumer(mockController)
	mockInAppSender := mocks.NewMockInAppSender(mockController)
	mockEmailSender := mocks.NewMockEmailSender(mockController)
	workerCfg := worker.WorkerCfg{
		UserInfoProvider:         mockUserInfoProvider,
		NotificationInfoProvider: mockNotificationInfoProvider,
		NotificationInfoUpdater:  mockNotificationInfoUpdater,
		Queue:                    mockQueueConsumer,
		InAppSender:              mockInAppSender,
		EmailSender:              mockEmailSender,
		NotificationChan:         notificationChan,
	}
	workerWorker := worker.NewWorker(workerCfg)
	mockedWorkerScenario := &MockedWorkerScenario{
		NotificationInfoProvider: mockNotificationInfoProvider,
		NotificationInfoUpdater:  mockNotificationInfoUpdater,
		UserInfoProvider:         mockUserInfoProvider,
		QueueConsumer:            mockQueueConsumer,
		InAppSender:              mockInAppSender,
		EmailSender:              mockEmailSender,
		Worker:                   workerWorker,
	}
	return mockedWorkerScenario
}

// wire.go:

var RabbitMQConsumerSet = wire.NewSet(consumers.NewRabbitMQConsumer)

var MockedUserInfoProviderSet = wire.NewSet(mocks.NewMockUserInfoProvider, wire.Bind(new(worker.UserInfoProvider), new(*mocks.MockUserInfoProvider)))

var MockedNotificationInfoProviderSet = wire.NewSet(mocks.NewMockNotificationInfoProvider, wire.Bind(new(worker.NotificationInfoProvider), new(*mocks.MockNotificationInfoProvider)))

var MockedNotificationInfoUpdaterSet = wire.NewSet(mocks.NewMockNotificationInfoUpdater, wire.Bind(new(worker.NotificationInfoUpdater), new(*mocks.MockNotificationInfoUpdater)))

var MockedQueueConsumerSet = wire.NewSet(mocks.NewMockQueueConsumer, wire.Bind(new(worker.QueueConsumer), new(*mocks.MockQueueConsumer)))

var MockedInAppSenderSet = wire.NewSet(mocks.NewMockInAppSender, wire.Bind(new(worker.InAppSender), new(*mocks.MockInAppSender)))

var MockedEmailSenderSet = wire.NewSet(mocks.NewMockEmailSender, wire.Bind(new(worker.EmailSender), new(*mocks.MockEmailSender)))

type MockedWorkerScenario struct {
	NotificationInfoProvider *mocks.MockNotificationInfoProvider
	NotificationInfoUpdater  *mocks.MockNotificationInfoUpdater
	UserInfoProvider         *mocks.MockUserInfoProvider
	QueueConsumer            *mocks.MockQueueConsumer
	InAppSender              *mocks.MockInAppSender
	EmailSender              *mocks.MockEmailSender
	Worker                   *worker.Worker
}
