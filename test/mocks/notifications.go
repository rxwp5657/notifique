// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/notifications.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controllers "github.com/notifique/controllers"
	dto "github.com/notifique/dto"
)

// MockNotificationStorage is a mock of NotificationStorage interface.
type MockNotificationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationStorageMockRecorder
}

// MockNotificationStorageMockRecorder is the mock recorder for MockNotificationStorage.
type MockNotificationStorageMockRecorder struct {
	mock *MockNotificationStorage
}

// NewMockNotificationStorage creates a new mock instance.
func NewMockNotificationStorage(ctrl *gomock.Controller) *MockNotificationStorage {
	mock := &MockNotificationStorage{ctrl: ctrl}
	mock.recorder = &MockNotificationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationStorage) EXPECT() *MockNotificationStorageMockRecorder {
	return m.recorder
}

// SaveNotification mocks base method.
func (m *MockNotificationStorage) SaveNotification(ctx context.Context, createdBy string, notification dto.NotificationReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNotification", ctx, createdBy, notification)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNotification indicates an expected call of SaveNotification.
func (mr *MockNotificationStorageMockRecorder) SaveNotification(ctx, createdBy, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotification", reflect.TypeOf((*MockNotificationStorage)(nil).SaveNotification), ctx, createdBy, notification)
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationStorage) UpdateNotificationStatus(ctx context.Context, statusLog controllers.NotificationStatusLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, statusLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationStorageMockRecorder) UpdateNotificationStatus(ctx, statusLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationStorage)(nil).UpdateNotificationStatus), ctx, statusLog)
}

// MockNotificationPublisher is a mock of NotificationPublisher interface.
type MockNotificationPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationPublisherMockRecorder
}

// MockNotificationPublisherMockRecorder is the mock recorder for MockNotificationPublisher.
type MockNotificationPublisherMockRecorder struct {
	mock *MockNotificationPublisher
}

// NewMockNotificationPublisher creates a new mock instance.
func NewMockNotificationPublisher(ctrl *gomock.Controller) *MockNotificationPublisher {
	mock := &MockNotificationPublisher{ctrl: ctrl}
	mock.recorder = &MockNotificationPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationPublisher) EXPECT() *MockNotificationPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNotificationPublisher) Publish(ctx context.Context, notification controllers.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNotificationPublisherMockRecorder) Publish(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotificationPublisher)(nil).Publish), ctx, notification)
}
