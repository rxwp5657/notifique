// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/users.go
//
// Generated by this command:
//
//	mockgen -source=./controllers/users.go -destination ./test/mocks/users.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/notifique/dto"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
	isgomock struct{}
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetUserConfig mocks base method.
func (m *MockUserStorage) GetUserConfig(ctx context.Context, userId string) (dto.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfig", ctx, userId)
	ret0, _ := ret[0].(dto.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfig indicates an expected call of GetUserConfig.
func (mr *MockUserStorageMockRecorder) GetUserConfig(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfig", reflect.TypeOf((*MockUserStorage)(nil).GetUserConfig), ctx, userId)
}

// GetUserNotifications mocks base method.
func (m *MockUserStorage) GetUserNotifications(ctx context.Context, filters dto.UserNotificationFilters) (dto.Page[dto.UserNotification], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotifications", ctx, filters)
	ret0, _ := ret[0].(dto.Page[dto.UserNotification])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifications indicates an expected call of GetUserNotifications.
func (mr *MockUserStorageMockRecorder) GetUserNotifications(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifications", reflect.TypeOf((*MockUserStorage)(nil).GetUserNotifications), ctx, filters)
}

// SetReadStatus mocks base method.
func (m *MockUserStorage) SetReadStatus(ctx context.Context, userId, notificationId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadStatus", ctx, userId, notificationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadStatus indicates an expected call of SetReadStatus.
func (mr *MockUserStorageMockRecorder) SetReadStatus(ctx, userId, notificationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadStatus", reflect.TypeOf((*MockUserStorage)(nil).SetReadStatus), ctx, userId, notificationId)
}

// UpdateUserConfig mocks base method.
func (m *MockUserStorage) UpdateUserConfig(ctx context.Context, userId string, config dto.UserConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConfig", ctx, userId, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserConfig indicates an expected call of UpdateUserConfig.
func (mr *MockUserStorageMockRecorder) UpdateUserConfig(ctx, userId, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConfig", reflect.TypeOf((*MockUserStorage)(nil).UpdateUserConfig), ctx, userId, config)
}

// MockUserNotificationBroker is a mock of UserNotificationBroker interface.
type MockUserNotificationBroker struct {
	ctrl     *gomock.Controller
	recorder *MockUserNotificationBrokerMockRecorder
	isgomock struct{}
}

// MockUserNotificationBrokerMockRecorder is the mock recorder for MockUserNotificationBroker.
type MockUserNotificationBrokerMockRecorder struct {
	mock *MockUserNotificationBroker
}

// NewMockUserNotificationBroker creates a new mock instance.
func NewMockUserNotificationBroker(ctrl *gomock.Controller) *MockUserNotificationBroker {
	mock := &MockUserNotificationBroker{ctrl: ctrl}
	mock.recorder = &MockUserNotificationBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserNotificationBroker) EXPECT() *MockUserNotificationBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockUserNotificationBroker) Publish(ctx context.Context, userId string, un dto.UserNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userId, un)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockUserNotificationBrokerMockRecorder) Publish(ctx, userId, un any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockUserNotificationBroker)(nil).Publish), ctx, userId, un)
}

// Suscribe mocks base method.
func (m *MockUserNotificationBroker) Suscribe(ctx context.Context, userId string) (<-chan dto.UserNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suscribe", ctx, userId)
	ret0, _ := ret[0].(<-chan dto.UserNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suscribe indicates an expected call of Suscribe.
func (mr *MockUserNotificationBrokerMockRecorder) Suscribe(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suscribe", reflect.TypeOf((*MockUserNotificationBroker)(nil).Suscribe), ctx, userId)
}

// Unsubscribe mocks base method.
func (m *MockUserNotificationBroker) Unsubscribe(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockUserNotificationBrokerMockRecorder) Unsubscribe(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockUserNotificationBroker)(nil).Unsubscribe), ctx, userId)
}
