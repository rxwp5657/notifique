// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencyinjection

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/notifique/controllers"
	"github.com/notifique/internal/publisher"
	"github.com/notifique/internal/storage/dynamodb"
	storage2 "github.com/notifique/internal/storage/postgres"
	"github.com/notifique/routes"
	"github.com/notifique/test/containers"
)

// Injectors from wire.go:

func InjectDynamoSQSEngine(cfg ConfigLoader) (*gin.Engine, error) {
	dynamoClientConfig := MakeDynamoClientConfig(cfg)
	client, err := storage.MakeDynamoDBClient(dynamoClientConfig)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage.MakeDynamoDBStorage(client)
	sqsConfig, err := MakeSQSConfig(cfg)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsConfig)
	engine := MakeEngine(dynamoDBStorage, sqsPublisher)
	return engine, nil
}

func InjectPostgresSQSEngine(cfg ConfigLoader) (*gin.Engine, error) {
	postgresURL, err := GetPostgresUrl(cfg)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage2.MakePostgresStorage(postgresURL)
	if err != nil {
		return nil, err
	}
	sqsConfig, err := MakeSQSConfig(cfg)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsConfig)
	engine := MakeEngine(postgresStorage, sqsPublisher)
	return engine, nil
}

func InjectPostgresSQSContainerTesting(ctx context.Context) (*PostgresSQSIntegrationTest, error) {
	postgresContainer, err := containers.MakePostgresContainer(ctx)
	if err != nil {
		return nil, err
	}
	sqsContainer, err := containers.MakeSQSContainer(ctx)
	if err != nil {
		return nil, err
	}
	postgresURL, err := MakePostgresUrlFromContainer(postgresContainer)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage2.MakePostgresStorage(postgresURL)
	if err != nil {
		return nil, err
	}
	sqsConfig, err := MakeSQSConfigFromContainer(sqsContainer)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsConfig)
	engine := MakeEngine(postgresStorage, sqsPublisher)
	postgresSQSIntegrationTest := &PostgresSQSIntegrationTest{
		PostgresContainer: postgresContainer,
		SQSContainer:      sqsContainer,
		Storage:           postgresStorage,
		Publisher:         sqsPublisher,
		Engine:            engine,
	}
	return postgresSQSIntegrationTest, nil
}

func InjectDynamoSQSContainerTesting(ctx context.Context) (*DynamoSQSIntegrationTest, error) {
	dynamoContainer, err := containers.MakeDynamoContainer(ctx)
	if err != nil {
		return nil, err
	}
	sqsContainer, err := containers.MakeSQSContainer(ctx)
	if err != nil {
		return nil, err
	}
	dynamoClientConfig, err := MakeDynamoConfigFromContainer(dynamoContainer)
	if err != nil {
		return nil, err
	}
	client, err := storage.MakeDynamoDBClient(dynamoClientConfig)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage.MakeDynamoDBStorage(client)
	sqsConfig, err := MakeSQSConfigFromContainer(sqsContainer)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsConfig)
	engine := MakeEngine(dynamoDBStorage, sqsPublisher)
	dynamoSQSIntegrationTest := &DynamoSQSIntegrationTest{
		DynamoContainer: dynamoContainer,
		SQSContainer:    sqsContainer,
		DynamoDBStorage: dynamoDBStorage,
		SQSPublisher:    sqsPublisher,
		Engine:          engine,
	}
	return dynamoSQSIntegrationTest, nil
}

// wire.go:

const (
	SQS_BASE_ENDPOINT       = "SQS_BASE_ENDPOINT"
	SQS_REGION              = "SQS_REGION"
	DYNAMO_BASE_ENDPOINT    = "DYNAMO_BASE_ENDPOINT"
	DYNAMO_REGION           = "DYNAMO_REGION"
	PRIORITY_SQS_LOW_URL    = "SQS_LOW_URL"
	PRIORITY_SQS_MEDIUM_URL = "SQS_MEDIUM_URL"
	PRIORITY_SQS_HIGH_URL   = "SQS_HIGH_URL"
	POSTGRES_URL            = "POSTGRES_URL"
)

type Storage interface {
	controllers.NotificationStorage
	controllers.UserStorage
	controllers.DistributionListStorage
}

type ConfigLoader interface {
	GetConfigValue(key string) (string, bool)
}

var DynamoSet = wire.NewSet(storage.MakeDynamoDBClient, storage.MakeDynamoDBStorage, wire.Bind(new(storage.DynamoDBAPI), new(*dynamodb.Client)), wire.Bind(new(Storage), new(*storage.DynamoDBStorage)))

var PostgresSet = wire.NewSet(storage2.MakePostgresStorage, wire.Bind(new(Storage), new(*storage2.PostgresStorage)))

var SQSSet = wire.NewSet(publisher.MakeSQSClient, publisher.MakeSQSPublisher, wire.Bind(new(publisher.SQSAPI), new(*sqs.Client)), wire.Bind(new(controllers.NotificationPublisher), new(*publisher.SQSPublisher)))

var PostgresContainerSet = wire.NewSet(containers.MakePostgresContainer, MakePostgresUrlFromContainer)

var SQSContainerSet = wire.NewSet(containers.MakeSQSContainer, MakeSQSConfigFromContainer)

var DynamoContainerSet = wire.NewSet(containers.MakeDynamoContainer, MakeDynamoConfigFromContainer)

type PostgresSQSIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	SQSContainer      *containers.SQSContainer
	Storage           *storage2.PostgresStorage
	Publisher         *publisher.SQSPublisher
	Engine            *gin.Engine
}

func (app *PostgresSQSIntegrationTest) Cleanup() error {
	if err := app.PostgresContainer.CleanupFn(); err != nil {
		return fmt.Errorf("failed to cleanup postgres container - %w", err)
	}

	if err := app.SQSContainer.CleanupFn(); err != nil {
		return fmt.Errorf("failed to terminate sqs container - %w", err)
	}

	return nil
}

type DynamoSQSIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	SQSContainer    *containers.SQSContainer
	DynamoDBStorage *storage.DynamoDBStorage
	SQSPublisher    *publisher.SQSPublisher
	Engine          *gin.Engine
}

func (app *DynamoSQSIntegrationTest) Cleanup() error {
	if err := app.DynamoContainer.CleanupFn(); err != nil {
		return fmt.Errorf("failed to cleanup dynamo container - %w", err)
	}

	if err := app.SQSContainer.CleanupFn(); err != nil {
		return fmt.Errorf("failed to terminate sqs container - %w", err)
	}

	return nil
}

func MakePostgresUrlFromContainer(container *containers.PostgresContainer) (storage2.PostgresURL, error) {

	if container == nil {
		return "", fmt.Errorf("postgres container is null")
	}

	return (storage2.PostgresURL)(container.URI), nil
}

func MakeSQSConfigFromContainer(container *containers.SQSContainer) (cfg publisher.SQSConfig, err error) {

	if container == nil {
		return cfg, fmt.Errorf("sqs container is null")
	}

	clientCfg := publisher.SQSClientConfig{BaseEndpoint: &container.URI}
	client, err := publisher.MakeSQSClient(clientCfg)

	if err != nil {
		return cfg, fmt.Errorf("failed to create client - %w", err)
	}

	cfg.Client = client
	cfg.Urls = container.SQSEndpoints

	return
}

func MakeDynamoConfigFromContainer(container *containers.DynamoContainer) (cfg storage.DynamoClientConfig, err error) {

	if container == nil {
		return cfg, fmt.Errorf("sqs container is null")
	}

	cfg.BaseEndpoint = &container.URI

	return
}

func MakeSQSClient(cfg ConfigLoader) (publisher.SQSAPI, error) {
	clientCfg := publisher.SQSClientConfig{}

	if baseEndpoint, ok := cfg.GetConfigValue(SQS_BASE_ENDPOINT); ok {
		clientCfg.BaseEndpoint = &baseEndpoint
	}

	if region, ok := cfg.GetConfigValue(SQS_REGION); ok {
		clientCfg.Region = &region
	}

	return publisher.MakeSQSClient(clientCfg)
}

func MakeSQSConfig(cfg ConfigLoader) (sqsCfg publisher.SQSConfig, err error) {

	client, err := MakeSQSClient(cfg)

	if err != nil {
		return sqsCfg, err
	}

	urls := MakeSQSUrls(cfg)

	sqsCfg.Client = client
	sqsCfg.Urls = urls

	return
}

func MakeEngine(storage3 Storage, pub controllers.NotificationPublisher) *gin.Engine {

	r := gin.Default()
	routes.SetupNotificationRoutes(r, storage3, pub)
	routes.SetupDistributionListRoutes(r, storage3)
	routes.SetupUsersRoutes(r, storage3)

	return r
}

func MakeSQSUrls(cfg ConfigLoader) (endpoints publisher.SQSEndpoints) {

	low, _ := cfg.GetConfigValue(PRIORITY_SQS_LOW_URL)
	medium, _ := cfg.GetConfigValue(PRIORITY_SQS_MEDIUM_URL)
	high, _ := cfg.GetConfigValue(PRIORITY_SQS_HIGH_URL)

	endpoints.Low = &low
	endpoints.Medium = &medium
	endpoints.High = &high

	return
}

func GetPostgresUrl(cfg ConfigLoader) (storage2.PostgresURL, error) {
	url, ok := cfg.GetConfigValue(POSTGRES_URL)

	if !ok {
		return "", fmt.Errorf("%s is not set", POSTGRES_URL)
	}

	return storage2.PostgresURL(url), nil
}

func MakeDynamoClientConfig(cfg ConfigLoader) (dynamoCfg storage.DynamoClientConfig) {

	clientCfg := storage.DynamoClientConfig{}

	if baseEndpoint, ok := cfg.GetConfigValue(DYNAMO_BASE_ENDPOINT); ok {
		clientCfg.BaseEndpoint = &baseEndpoint
	}

	if region, ok := cfg.GetConfigValue(DYNAMO_REGION); ok {
		clientCfg.Region = &region
	}

	return
}
