// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencyinjection

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/notifique/controllers"
	"github.com/notifique/internal"
	"github.com/notifique/internal/broker"
	"github.com/notifique/internal/config"
	"github.com/notifique/internal/deployments"
	"github.com/notifique/internal/publish"
	"github.com/notifique/internal/storage/dynamodb"
	"github.com/notifique/internal/storage/postgres"
	"github.com/notifique/routes"
	"github.com/notifique/test/config"
	"github.com/notifique/test/containers"
	"github.com/notifique/test/mocks"
	"github.com/redis/go-redis/v9"
	"go.uber.org/mock/gomock"
)

// Injectors from wire.go:

func InjectPgPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	storage, err := postgresstorage.NewPostgresStorage(envConfig)
	if err != nil {
		return nil, err
	}
	client, err := publish.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(client)
	priorityPublisher := publish.NewPriorityPublisher(sqsPublisher, envConfig, storage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	redis, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		return nil, err
	}
	engine, err := routes.NewEngine(storage, priorityPublisher, redis, envConfig)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

func InjectPgPriorityRabbitMQ(envfile string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	storage, err := postgresstorage.NewPostgresStorage(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQClient, cleanup, err := publish.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publish.NewPriorityPublisher(rabbitMQPublisher, envConfig, storage)
	client, err := internal.NewRedisClient(envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redis, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine, err := routes.NewEngine(storage, priorityPublisher, redis, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return engine, func() {
		cleanup()
	}, nil
}

func InjectDynamoPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := dynamostorage.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, err
	}
	storage := dynamostorage.NewDynamoDBStorage(client)
	sqsClient, err := publish.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(sqsClient)
	priorityPublisher := publish.NewPriorityPublisher(sqsPublisher, envConfig, storage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	redis, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		return nil, err
	}
	engine, err := routes.NewEngine(storage, priorityPublisher, redis, envConfig)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

func InjectDynamoPriorityRabbitMQ(envfile string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	client, err := dynamostorage.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	storage := dynamostorage.NewDynamoDBStorage(client)
	rabbitMQClient, cleanup, err := publish.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publish.NewPriorityPublisher(rabbitMQPublisher, envConfig, storage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redis, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine, err := routes.NewEngine(storage, priorityPublisher, redis, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return engine, func() {
		cleanup()
	}, nil
}

func InjectPgMockedPubIntegrationTest(ctx context.Context, mockController *gomock.Controller) (*PostgresMockedPubIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	redisContainer, cleanup2, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	storage, err := postgresstorage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	client, err := internal.NewRedisClient(redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redis, err := broker.NewRedisBroker(client, redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	testVersionConfiguratorFunc := config_test.NewTestVersionConfigurator()
	engine, err := routes.NewEngine(storage, mockNotificationPublisher, redis, testVersionConfiguratorFunc)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	postgresMockedPubIntegrationTest := &PostgresMockedPubIntegrationTest{
		PostgresContainer: postgresContainer,
		RedisContainer:    redisContainer,
		Storage:           storage,
		Publisher:         mockNotificationPublisher,
		Broker:            redis,
		Engine:            engine,
	}
	return postgresMockedPubIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoMockedPubIntegrationTest(ctx context.Context, mockController *gomock.Controller) (*DynamoMockedPubIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	redisContainer, cleanup2, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := dynamostorage.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storage := dynamostorage.NewDynamoDBStorage(client)
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	redisClient, err := internal.NewRedisClient(redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redis, err := broker.NewRedisBroker(redisClient, redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	testVersionConfiguratorFunc := config_test.NewTestVersionConfigurator()
	engine, err := routes.NewEngine(storage, mockNotificationPublisher, redis, testVersionConfiguratorFunc)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dynamoMockedPubIntegrationTest := &DynamoMockedPubIntegrationTest{
		DynamoContainer: dynamoContainer,
		RedisContainer:  redisContainer,
		Storage:         storage,
		Publisher:       mockNotificationPublisher,
		Broker:          redis,
		Engine:          engine,
	}
	return dynamoMockedPubIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectPgSQSPriorityIntegrationTest(ctx context.Context) (*PgSQSPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityContainer, cleanup2, err := containers.NewSQSPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	storage, err := postgresstorage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, err := publish.NewSQSClient(sqsPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(client)
	priorityPublisher := publish.NewPriorityPublisher(sqsPublisher, sqsPriorityContainer, storage)
	pgSQSPriorityIntegrationTest := &PgSQSPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		SQSContainer:      sqsPriorityContainer,
		Storage:           storage,
		Publisher:         priorityPublisher,
	}
	return pgSQSPriorityIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectPgRabbitMQPriorityIntegrationTest(ctx context.Context) (*PgRabbitMQPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityContainer, cleanup2, err := containers.NewRabbitMQPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	storage, err := postgresstorage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQClient, cleanup3, err := publish.NewRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publish.NewPriorityPublisher(rabbitMQPublisher, rabbitMQPriorityContainer, storage)
	pgRabbitMQPriorityIntegrationTest := &PgRabbitMQPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		Storage:           storage,
		Publisher:         priorityPublisher,
	}
	return pgRabbitMQPriorityIntegrationTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoSQSPriorityIntegrationTest(ctx context.Context) (*DynamoSQSPriorityIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityContainer, cleanup2, err := containers.NewSQSPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := dynamostorage.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storage := dynamostorage.NewDynamoDBStorage(client)
	sqsClient, err := publish.NewSQSClient(sqsPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(sqsClient)
	priorityPublisher := publish.NewPriorityPublisher(sqsPublisher, sqsPriorityContainer, storage)
	dynamoSQSPriorityIntegrationTest := &DynamoSQSPriorityIntegrationTest{
		DynamoContainer: dynamoContainer,
		SQSContainer:    sqsPriorityContainer,
		Storage:         storage,
		Publisher:       priorityPublisher,
	}
	return dynamoSQSPriorityIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoRabbitMQPriorityIntegrationTest(ctx context.Context) (*DynamoRabbitMQPriorityIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityContainer, cleanup2, err := containers.NewRabbitMQPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := dynamostorage.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storage := dynamostorage.NewDynamoDBStorage(client)
	rabbitMQClient, cleanup3, err := publish.NewRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publish.NewPriorityPublisher(rabbitMQPublisher, rabbitMQPriorityContainer, storage)
	dynamoRabbitMQPriorityIntegrationTest := &DynamoRabbitMQPriorityIntegrationTest{
		DynamoContainer:   dynamoContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		Storage:           storage,
		Publisher:         priorityPublisher,
	}
	return dynamoRabbitMQPriorityIntegrationTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectMockedBackend(ctx context.Context, mockController *gomock.Controller) (*MockedBackend, error) {
	mockDistributionListStorage := mock_controllers.NewMockDistributionListStorage(mockController)
	mockUserStorage := mock_controllers.NewMockUserStorage(mockController)
	mockNotificationStorage := mock_controllers.NewMockNotificationStorage(mockController)
	mockedStorage := mock_controllers.NewMockedStorage(mockDistributionListStorage, mockUserStorage, mockNotificationStorage)
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	mockUserNotificationBroker := mock_controllers.NewMockUserNotificationBroker(mockController)
	testVersionConfiguratorFunc := config_test.NewTestVersionConfigurator()
	engine, err := routes.NewEngine(mockedStorage, mockNotificationPublisher, mockUserNotificationBroker, testVersionConfiguratorFunc)
	if err != nil {
		return nil, err
	}
	mockedBackend := &MockedBackend{
		Storage:   mockedStorage,
		Publisher: mockNotificationPublisher,
		Broker:    mockUserNotificationBroker,
		Engine:    engine,
	}
	return mockedBackend, nil
}

func InjectRabbitMQPriorityDeployer(envfile string) (*deployments.RabbitMQPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityDeployer, cleanup, err := deployments.NewRabbitMQPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return rabbitMQPriorityDeployer, func() {
		cleanup()
	}, nil
}

func InjectSQSPriorityDeployer(envfile string) (*deployments.SQSPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityDeployer, err := deployments.NewSQSPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return sqsPriorityDeployer, func() {
	}, nil
}

// wire.go:

type PostgresMockedPubIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RedisContainer    *containers.RedisContainer
	Storage           *postgresstorage.Storage
	Publisher         *mock_controllers.MockNotificationPublisher
	Broker            *broker.Redis
	Engine            *gin.Engine
}

type DynamoMockedPubIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	RedisContainer  *containers.RedisContainer
	Storage         *dynamostorage.Storage
	Publisher       *mock_controllers.MockNotificationPublisher
	Broker          *broker.Redis
	Engine          *gin.Engine
}

type PgSQSPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	SQSContainer      *containers.SQSPriorityContainer
	Storage           *postgresstorage.Storage
	Publisher         *publish.PriorityPublisher
}

type PgRabbitMQPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	Storage           *postgresstorage.Storage
	Publisher         *publish.PriorityPublisher
}

type DynamoSQSPriorityIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	SQSContainer    *containers.SQSPriorityContainer
	Storage         *dynamostorage.Storage
	Publisher       *publish.PriorityPublisher
}

type DynamoRabbitMQPriorityIntegrationTest struct {
	DynamoContainer   *containers.DynamoContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	Storage           *dynamostorage.Storage
	Publisher         *publish.PriorityPublisher
}

type MockedBackend struct {
	Storage   *mock_controllers.MockedStorage
	Publisher *mock_controllers.MockNotificationPublisher
	Broker    *mock_controllers.MockUserNotificationBroker
	Engine    *gin.Engine
}

var DynamoSet = wire.NewSet(dynamostorage.NewDynamoDBClient, dynamostorage.NewDynamoDBStorage, wire.Bind(new(dynamostorage.DynamoDBAPI), new(*dynamodb.Client)), wire.Bind(new(routes.Storage), new(*dynamostorage.Storage)), wire.Bind(new(controllers.NotificationStorage), new(*dynamostorage.Storage)))

var PostgresSet = wire.NewSet(postgresstorage.NewPostgresStorage, wire.Bind(new(routes.Storage), new(*postgresstorage.Storage)), wire.Bind(new(controllers.NotificationStorage), new(*postgresstorage.Storage)))

var SQSPublisherSet = wire.NewSet(publish.NewSQSClient, publish.NewSQSPublisher, wire.Bind(new(publish.SQSAPI), new(*sqs.Client)), wire.Bind(new(publish.Publisher), new(*publish.SQSPublisher)))

var RabbitMQPublisherSet = wire.NewSet(publish.NewRabbitMQClient, publish.NewRabbitMQPublisher, wire.Bind(new(publish.RabbitMQAPI), new(*publish.RabbitMQClient)), wire.Bind(new(publish.Publisher), new(*publish.RabbitMQPublisher)))

var PostgresSQSPriroritySet = wire.NewSet(
	PostgresSet,
	SQSPublisherSet, publish.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publish.PriorityPublisher)),
)

var PostgresRabbitMQPriroritySet = wire.NewSet(
	PostgresSet,
	RabbitMQPublisherSet, publish.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publish.PriorityPublisher)),
)

var DynamoSQSPriroritySet = wire.NewSet(
	DynamoSet,
	SQSPublisherSet, publish.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publish.PriorityPublisher)),
)

var DynamoRabbitMQPriroritySet = wire.NewSet(
	DynamoSet,
	RabbitMQPublisherSet, publish.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publish.PriorityPublisher)),
)

var RedisUserNotificationBrokerSet = wire.NewSet(internal.NewRedisClient, broker.NewRedisBroker, wire.Bind(new(broker.RedisApi), new(*redis.Client)), wire.Bind(new(controllers.UserNotificationBroker), new(*broker.Redis)))

var PostgresContainerSet = wire.NewSet(containers.NewPostgresContainer, wire.Bind(new(postgresstorage.PostgresConfigurator), new(*containers.PostgresContainer)))

var SQSPriorityContainerSet = wire.NewSet(containers.NewSQSPriorityContainer, wire.Bind(new(publish.SQSConfigurator), new(*containers.SQSPriorityContainer)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*containers.SQSPriorityContainer)))

var RabbitMQPriorityContainerSet = wire.NewSet(containers.NewRabbitMQPriorityContainer, wire.Bind(new(publish.RabbitMQConfigurator), new(*containers.RabbitMQPriorityContainer)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*containers.RabbitMQPriorityContainer)))

var DynamoContainerSet = wire.NewSet(containers.NewDynamoContainer, wire.Bind(new(dynamostorage.DynamoConfigurator), new(*containers.DynamoContainer)))

var RedisContainerSet = wire.NewSet(containers.NewRedisContainer, wire.Bind(new(internal.RedisConfigurator), new(*containers.RedisContainer)), wire.Bind(new(broker.BrokerConfigurator), new(*containers.RedisContainer)))

var MockedPublihserSet = wire.NewSet(mock_controllers.NewMockNotificationPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*mock_controllers.MockNotificationPublisher)))

var MockedDistributionListStorageSet = wire.NewSet(mock_controllers.NewMockDistributionListStorage, wire.Bind(new(controllers.DistributionListStorage), new(*mock_controllers.MockDistributionListStorage)))

var MockedUserStorageSet = wire.NewSet(mock_controllers.NewMockUserStorage, wire.Bind(new(controllers.UserStorage), new(*mock_controllers.MockUserStorage)))

var MockedNotificationStorageSet = wire.NewSet(mock_controllers.NewMockNotificationStorage, wire.Bind(new(controllers.NotificationStorage), new(*mock_controllers.MockNotificationStorage)))

var MockedUserNotificationBroker = wire.NewSet(mock_controllers.NewMockUserNotificationBroker, wire.Bind(new(controllers.UserNotificationBroker), new(*mock_controllers.MockUserNotificationBroker)))

var MockedStorageSet = wire.NewSet(
	MockedDistributionListStorageSet,
	MockedUserStorageSet,
	MockedNotificationStorageSet, mock_controllers.NewMockedStorage, wire.Bind(new(routes.Storage), new(*mock_controllers.MockedStorage)),
)

var TestVersionConfiguratorSet = wire.NewSet(config_test.NewTestVersionConfigurator, wire.Bind(new(routes.VersionConfigurator), new(config_test.TestVersionConfiguratorFunc)))

var EnvConfigSet = wire.NewSet(config.NewEnvConfig, wire.Bind(new(postgresstorage.PostgresConfigurator), new(*config.EnvConfig)), wire.Bind(new(dynamostorage.DynamoConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.SQSConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.RabbitMQConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.RabbitMQPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.SQSPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(internal.RedisConfigurator), new(*config.EnvConfig)), wire.Bind(new(broker.BrokerConfigurator), new(*config.EnvConfig)), wire.Bind(new(routes.VersionConfigurator), new(*config.EnvConfig)))
