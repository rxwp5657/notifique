// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencyinjection

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/golang/mock/gomock"
	"github.com/google/wire"
	"github.com/notifique/controllers"
	"github.com/notifique/internal"
	"github.com/notifique/internal/broker"
	"github.com/notifique/internal/config"
	"github.com/notifique/internal/deployments"
	"github.com/notifique/internal/publisher"
	storage2 "github.com/notifique/internal/storage/dynamodb"
	"github.com/notifique/internal/storage/postgres"
	"github.com/notifique/routes"
	"github.com/notifique/test/containers"
	"github.com/notifique/test/mocks"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func InjectPgPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage.NewPostgresStorage(envConfig)
	if err != nil {
		return nil, err
	}
	client, err := publisher.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.NewSQSPublisher(client)
	priorityPublisher := publisher.NewPriorityPublisher(sqsPublisher, envConfig, postgresStorage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	redisBroker, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		return nil, err
	}
	engine := NewEngine(postgresStorage, priorityPublisher, redisBroker)
	return engine, nil
}

func InjectPgPriorityRabbitMQ(envfile string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	postgresStorage, err := storage.NewPostgresStorage(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQClient, cleanup, err := publisher.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publisher.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publisher.NewPriorityPublisher(rabbitMQPublisher, envConfig, postgresStorage)
	client, err := internal.NewRedisClient(envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisBroker, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine := NewEngine(postgresStorage, priorityPublisher, redisBroker)
	return engine, func() {
		cleanup()
	}, nil
}

func InjectDynamoPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := storage2.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage2.NewDynamoDBStorage(client)
	sqsClient, err := publisher.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.NewSQSPublisher(sqsClient)
	priorityPublisher := publisher.NewPriorityPublisher(sqsPublisher, envConfig, dynamoDBStorage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	redisBroker, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		return nil, err
	}
	engine := NewEngine(dynamoDBStorage, priorityPublisher, redisBroker)
	return engine, nil
}

func InjectDynamoPriorityRabbitMQ(envfile string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	client, err := storage2.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	dynamoDBStorage := storage2.NewDynamoDBStorage(client)
	rabbitMQClient, cleanup, err := publisher.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publisher.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publisher.NewPriorityPublisher(rabbitMQPublisher, envConfig, dynamoDBStorage)
	redisClient, err := internal.NewRedisClient(envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisBroker, err := broker.NewRedisBroker(redisClient, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine := NewEngine(dynamoDBStorage, priorityPublisher, redisBroker)
	return engine, func() {
		cleanup()
	}, nil
}

func InjectPgMockedPubIntegrationTest(ctx context.Context, mockController *gomock.Controller) (*PostgresMockedPubIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	redisContainer, cleanup2, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresStorage, err := storage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	client, err := internal.NewRedisClient(redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redisBroker, err := broker.NewRedisBroker(client, redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	engine := NewEngine(postgresStorage, mockNotificationPublisher, redisBroker)
	postgresMockedPubIntegrationTest := &PostgresMockedPubIntegrationTest{
		PostgresContainer: postgresContainer,
		RedisContainer:    redisContainer,
		Storage:           postgresStorage,
		Publisher:         mockNotificationPublisher,
		Broker:            redisBroker,
		Engine:            engine,
	}
	return postgresMockedPubIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoMockedPubIntegrationTest(ctx context.Context, mockController *gomock.Controller) (*DynamoMockedPubIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	redisContainer, cleanup2, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := storage2.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dynamoDBStorage := storage2.NewDynamoDBStorage(client)
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	redisClient, err := internal.NewRedisClient(redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redisBroker, err := broker.NewRedisBroker(redisClient, redisContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	engine := NewEngine(dynamoDBStorage, mockNotificationPublisher, redisBroker)
	dynamoMockedPubIntegrationTest := &DynamoMockedPubIntegrationTest{
		DynamoContainer: dynamoContainer,
		RedisContainer:  redisContainer,
		Storage:         dynamoDBStorage,
		Publisher:       mockNotificationPublisher,
		Broker:          redisBroker,
		Engine:          engine,
	}
	return dynamoMockedPubIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectPgSQSPriorityIntegrationTest(ctx context.Context) (*PgSQSPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityContainer, cleanup2, err := containers.NewSQSPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresStorage, err := storage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, err := publisher.NewSQSClient(sqsPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sqsPublisher := publisher.NewSQSPublisher(client)
	priorityPublisher := publisher.NewPriorityPublisher(sqsPublisher, sqsPriorityContainer, postgresStorage)
	pgSQSPriorityIntegrationTest := &PgSQSPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		SQSContainer:      sqsPriorityContainer,
		Storage:           postgresStorage,
		Publisher:         priorityPublisher,
	}
	return pgSQSPriorityIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectPgRabbitMQPriorityIntegrationTest(ctx context.Context) (*PgRabbitMQPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityContainer, cleanup2, err := containers.NewRabbitMQPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresStorage, err := storage.NewPostgresStorage(postgresContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQClient, cleanup3, err := publisher.NewRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQPublisher := publisher.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publisher.NewPriorityPublisher(rabbitMQPublisher, rabbitMQPriorityContainer, postgresStorage)
	pgRabbitMQPriorityIntegrationTest := &PgRabbitMQPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		Storage:           postgresStorage,
		Publisher:         priorityPublisher,
	}
	return pgRabbitMQPriorityIntegrationTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoSQSPriorityIntegrationTest(ctx context.Context) (*DynamoSQSPriorityIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityContainer, cleanup2, err := containers.NewSQSPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := storage2.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dynamoDBStorage := storage2.NewDynamoDBStorage(client)
	sqsClient, err := publisher.NewSQSClient(sqsPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sqsPublisher := publisher.NewSQSPublisher(sqsClient)
	priorityPublisher := publisher.NewPriorityPublisher(sqsPublisher, sqsPriorityContainer, dynamoDBStorage)
	dynamoSQSPriorityIntegrationTest := &DynamoSQSPriorityIntegrationTest{
		DynamoContainer: dynamoContainer,
		SQSContainer:    sqsPriorityContainer,
		Storage:         dynamoDBStorage,
		Publisher:       priorityPublisher,
	}
	return dynamoSQSPriorityIntegrationTest, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InjectDynamoRabbitMQPriorityIntegrationTest(ctx context.Context) (*DynamoRabbitMQPriorityIntegrationTest, func(), error) {
	dynamoContainer, cleanup, err := containers.NewDynamoContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityContainer, cleanup2, err := containers.NewRabbitMQPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := storage2.NewDynamoDBClient(dynamoContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dynamoDBStorage := storage2.NewDynamoDBStorage(client)
	rabbitMQClient, cleanup3, err := publisher.NewRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQPublisher := publisher.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisher := publisher.NewPriorityPublisher(rabbitMQPublisher, rabbitMQPriorityContainer, dynamoDBStorage)
	dynamoRabbitMQPriorityIntegrationTest := &DynamoRabbitMQPriorityIntegrationTest{
		DynamoContainer:   dynamoContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		Storage:           dynamoDBStorage,
		Publisher:         priorityPublisher,
	}
	return dynamoRabbitMQPriorityIntegrationTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectRabbitMQPriorityDeployer(envfile string) (*deployments.RabbitMQPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityDeployer, cleanup, err := deployments.NewRabbitMQPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return rabbitMQPriorityDeployer, func() {
		cleanup()
	}, nil
}

func InjectSQSPriorityDeployer(envfile string) (*deployments.SQSPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityDeployer, err := deployments.NewSQSPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return sqsPriorityDeployer, func() {
	}, nil
}

// wire.go:

type Storage interface {
	controllers.NotificationStorage
	controllers.UserStorage
	controllers.DistributionListStorage
}

type PostgresMockedPubIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RedisContainer    *containers.RedisContainer
	Storage           *storage.PostgresStorage
	Publisher         *mock_controllers.MockNotificationPublisher
	Broker            *broker.RedisBroker
	Engine            *gin.Engine
}

type DynamoMockedPubIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	RedisContainer  *containers.RedisContainer
	Storage         *storage2.DynamoDBStorage
	Publisher       *mock_controllers.MockNotificationPublisher
	Broker          *broker.RedisBroker
	Engine          *gin.Engine
}

type PgSQSPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	SQSContainer      *containers.SQSPriorityContainer
	Storage           *storage.PostgresStorage
	Publisher         *publisher.PriorityPublisher
}

type PgRabbitMQPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	Storage           *storage.PostgresStorage
	Publisher         *publisher.PriorityPublisher
}

type DynamoSQSPriorityIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	SQSContainer    *containers.SQSPriorityContainer
	Storage         *storage2.DynamoDBStorage
	Publisher       *publisher.PriorityPublisher
}

type DynamoRabbitMQPriorityIntegrationTest struct {
	DynamoContainer   *containers.DynamoContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	Storage           *storage2.DynamoDBStorage
	Publisher         *publisher.PriorityPublisher
}

var DynamoSet = wire.NewSet(storage2.NewDynamoDBClient, storage2.NewDynamoDBStorage, wire.Bind(new(storage2.DynamoDBAPI), new(*dynamodb.Client)), wire.Bind(new(Storage), new(*storage2.DynamoDBStorage)), wire.Bind(new(controllers.NotificationStorage), new(*storage2.DynamoDBStorage)))

var PostgresSet = wire.NewSet(storage.NewPostgresStorage, wire.Bind(new(Storage), new(*storage.PostgresStorage)), wire.Bind(new(controllers.NotificationStorage), new(*storage.PostgresStorage)))

var SQSPublisherSet = wire.NewSet(publisher.NewSQSClient, publisher.NewSQSPublisher, wire.Bind(new(publisher.SQSAPI), new(*sqs.Client)), wire.Bind(new(publisher.Publisher), new(*publisher.SQSPublisher)))

var RabbitMQPublisherSet = wire.NewSet(publisher.NewRabbitMQClient, publisher.NewRabbitMQPublisher, wire.Bind(new(publisher.RabbitMQAPI), new(*publisher.RabbitMQClient)), wire.Bind(new(publisher.Publisher), new(*publisher.RabbitMQPublisher)))

var PostgresSQSPriroritySet = wire.NewSet(
	PostgresSet,
	SQSPublisherSet, publisher.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publisher.PriorityPublisher)),
)

var PostgresRabbitMQPriroritySet = wire.NewSet(
	PostgresSet,
	RabbitMQPublisherSet, publisher.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publisher.PriorityPublisher)),
)

var DynamoSQSPriroritySet = wire.NewSet(
	DynamoSet,
	SQSPublisherSet, publisher.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publisher.PriorityPublisher)),
)

var DynamoRabbitMQPriroritySet = wire.NewSet(
	DynamoSet,
	RabbitMQPublisherSet, publisher.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publisher.PriorityPublisher)),
)

var RedisUserNotificationBrokerSet = wire.NewSet(internal.NewRedisClient, broker.NewRedisBroker, wire.Bind(new(broker.RedisApi), new(*redis.Client)), wire.Bind(new(controllers.UserNotificationBroker), new(*broker.RedisBroker)))

var PostgresContainerSet = wire.NewSet(containers.NewPostgresContainer, wire.Bind(new(storage.PostgresConfigurator), new(*containers.PostgresContainer)))

var SQSPriorityContainerSet = wire.NewSet(containers.NewSQSPriorityContainer, wire.Bind(new(publisher.SQSConfigurator), new(*containers.SQSPriorityContainer)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*containers.SQSPriorityContainer)))

var RabbitMQPriorityContainerSet = wire.NewSet(containers.NewRabbitMQPriorityContainer, wire.Bind(new(publisher.RabbitMQConfigurator), new(*containers.RabbitMQPriorityContainer)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*containers.RabbitMQPriorityContainer)))

var DynamoContainerSet = wire.NewSet(containers.NewDynamoContainer, wire.Bind(new(storage2.DynamoConfigurator), new(*containers.DynamoContainer)))

var RedisContainerSet = wire.NewSet(containers.NewRedisContainer, wire.Bind(new(internal.RedisConfigurator), new(*containers.RedisContainer)), wire.Bind(new(broker.BrokerConfigurator), new(*containers.RedisContainer)))

var MockedPublihserSet = wire.NewSet(mock_controllers.NewMockNotificationPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*mock_controllers.MockNotificationPublisher)))

var EnvConfigSet = wire.NewSet(config.NewEnvConfig, wire.Bind(new(storage.PostgresConfigurator), new(*config.EnvConfig)), wire.Bind(new(storage2.DynamoConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.SQSConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.RabbitMQConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.RabbitMQPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.SQSPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(internal.RedisConfigurator), new(*config.EnvConfig)), wire.Bind(new(broker.BrokerConfigurator), new(*config.EnvConfig)))

func NewEngine(storage3 Storage, pub controllers.NotificationPublisher, bk controllers.UserNotificationBroker) *gin.Engine {

	r := gin.Default()
	routes.SetupNotificationRoutes(r, storage3, pub)
	routes.SetupDistributionListRoutes(r, storage3)
	routes.SetupUsersRoutes(r, storage3, bk)

	return r
}
