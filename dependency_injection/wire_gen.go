// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencyinjection

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/notifique/controllers"
	"github.com/notifique/deployments/rabbitmq"
	deployments2 "github.com/notifique/deployments/sqs"
	"github.com/notifique/internal/config"
	"github.com/notifique/internal/publisher"
	storage2 "github.com/notifique/internal/storage/dynamodb"
	"github.com/notifique/internal/storage/postgres"
	"github.com/notifique/routes"
	"github.com/notifique/test/containers"
)

// Injectors from wire.go:

func InjectPgPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage.MakePostgresStorage(envConfig)
	if err != nil {
		return nil, err
	}
	client, err := publisher.MakeSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(client, envConfig)
	engine := MakeEngine(postgresStorage, sqsPublisher)
	return engine, nil
}

func InjectPgPriorityRabbitMQ(envfile string) (*gin.Engine, error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage.MakePostgresStorage(envConfig)
	if err != nil {
		return nil, err
	}
	rabbitMQClient, err := publisher.MakeRabbitMQClient(envConfig)
	if err != nil {
		return nil, err
	}
	rabbitMQPriorityPublisher := publisher.MakeRabbitMQPriorityPub(rabbitMQClient, envConfig)
	engine := MakeEngine(postgresStorage, rabbitMQPriorityPublisher)
	return engine, nil
}

func InjectDynamoPrioritySQS(envfile string) (*gin.Engine, error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := storage2.MakeDynamoDBClient(envConfig)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage2.MakeDynamoDBStorage(client)
	sqsClient, err := publisher.MakeSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsClient, envConfig)
	engine := MakeEngine(dynamoDBStorage, sqsPublisher)
	return engine, nil
}

func InjectDynamoPriorityRabbitMQ(envfile string) (*gin.Engine, error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := storage2.MakeDynamoDBClient(envConfig)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage2.MakeDynamoDBStorage(client)
	rabbitMQClient, err := publisher.MakeRabbitMQClient(envConfig)
	if err != nil {
		return nil, err
	}
	rabbitMQPriorityPublisher := publisher.MakeRabbitMQPriorityPub(rabbitMQClient, envConfig)
	engine := MakeEngine(dynamoDBStorage, rabbitMQPriorityPublisher)
	return engine, nil
}

func InjectPgPrioritySQSIntegrationTest(ctx context.Context) (*PostgresPrioritySQSIntegrationTest, error) {
	postgresContainer, err := containers.MakePostgresContainer(ctx)
	if err != nil {
		return nil, err
	}
	sqsPriorityContainer, err := containers.MakeSQSPriorityContainer(ctx)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage.MakePostgresStorage(postgresContainer)
	if err != nil {
		return nil, err
	}
	client, err := publisher.MakeSQSClient(sqsPriorityContainer)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(client, sqsPriorityContainer)
	engine := MakeEngine(postgresStorage, sqsPublisher)
	postgresPrioritySQSIntegrationTest := &PostgresPrioritySQSIntegrationTest{
		PostgresContainer: postgresContainer,
		SQSContainer:      sqsPriorityContainer,
		Storage:           postgresStorage,
		Publisher:         sqsPublisher,
		Engine:            engine,
	}
	return postgresPrioritySQSIntegrationTest, nil
}

func InjectPgPriorityRabbitMQIntegrationTest(ctx context.Context) (*PostgresPriorityRabbitMQIntegrationTest, error) {
	postgresContainer, err := containers.MakePostgresContainer(ctx)
	if err != nil {
		return nil, err
	}
	rabbitMQPriorityContainer, err := containers.MakeRabbitMQPriorityContainer(ctx)
	if err != nil {
		return nil, err
	}
	rabbitMQClient, err := publisher.MakeRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		return nil, err
	}
	postgresStorage, err := storage.MakePostgresStorage(postgresContainer)
	if err != nil {
		return nil, err
	}
	rabbitMQPriorityPublisher := publisher.MakeRabbitMQPriorityPub(rabbitMQClient, rabbitMQPriorityContainer)
	engine := MakeEngine(postgresStorage, rabbitMQPriorityPublisher)
	postgresPriorityRabbitMQIntegrationTest := &PostgresPriorityRabbitMQIntegrationTest{
		PostgresContainer: postgresContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		RabbitMQClient:    rabbitMQClient,
		Storage:           postgresStorage,
		Publisher:         rabbitMQPriorityPublisher,
		Engine:            engine,
	}
	return postgresPriorityRabbitMQIntegrationTest, nil
}

func InjectDynamoPrioritySQSIntegrationTest(ctx context.Context) (*DynamoPrioritySQSIntegrationTest, error) {
	dynamoContainer, err := containers.MakeDynamoContainer(ctx)
	if err != nil {
		return nil, err
	}
	sqsPriorityContainer, err := containers.MakeSQSPriorityContainer(ctx)
	if err != nil {
		return nil, err
	}
	client, err := storage2.MakeDynamoDBClient(dynamoContainer)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage2.MakeDynamoDBStorage(client)
	sqsClient, err := publisher.MakeSQSClient(sqsPriorityContainer)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publisher.MakeSQSPublisher(sqsClient, sqsPriorityContainer)
	engine := MakeEngine(dynamoDBStorage, sqsPublisher)
	dynamoPrioritySQSIntegrationTest := &DynamoPrioritySQSIntegrationTest{
		DynamoContainer: dynamoContainer,
		SQSContainer:    sqsPriorityContainer,
		Storage:         dynamoDBStorage,
		Publisher:       sqsPublisher,
		Engine:          engine,
	}
	return dynamoPrioritySQSIntegrationTest, nil
}

func InjectDynamoPriorityRabbitMQIntegrationTest(ctx context.Context) (*DynamoPriorityRabbitMQIntegrationTest, error) {
	dynamoContainer, err := containers.MakeDynamoContainer(ctx)
	if err != nil {
		return nil, err
	}
	rabbitMQPriorityContainer, err := containers.MakeRabbitMQPriorityContainer(ctx)
	if err != nil {
		return nil, err
	}
	rabbitMQClient, err := publisher.MakeRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		return nil, err
	}
	client, err := storage2.MakeDynamoDBClient(dynamoContainer)
	if err != nil {
		return nil, err
	}
	dynamoDBStorage := storage2.MakeDynamoDBStorage(client)
	rabbitMQPriorityPublisher := publisher.MakeRabbitMQPriorityPub(rabbitMQClient, rabbitMQPriorityContainer)
	engine := MakeEngine(dynamoDBStorage, rabbitMQPriorityPublisher)
	dynamoPriorityRabbitMQIntegrationTest := &DynamoPriorityRabbitMQIntegrationTest{
		DynamoContainer:   dynamoContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		RabbitMQClient:    rabbitMQClient,
		Storage:           dynamoDBStorage,
		Publisher:         rabbitMQPriorityPublisher,
		Engine:            engine,
	}
	return dynamoPriorityRabbitMQIntegrationTest, nil
}

func InjectRabbitMQPriorityDeployer(envfile string) (*deployments.RabbitMQPriorityDeployer, func(), error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityDeployer, cleanup, err := deployments.MakeRabbitMQPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return rabbitMQPriorityDeployer, func() {
		cleanup()
	}, nil
}

func InjectSQSPriorityDeployer(envfile string) (*deployments2.SQSPriorityDeployer, func(), error) {
	envConfig, err := config.MakeEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityDeployer, cleanup, err := deployments2.MakeSQSPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return sqsPriorityDeployer, func() {
		cleanup()
	}, nil
}

// wire.go:

type Storage interface {
	controllers.NotificationStorage
	controllers.UserStorage
	controllers.DistributionListStorage
}

type PostgresPrioritySQSIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	SQSContainer      *containers.SQSPriorityContainer
	Storage           *storage.PostgresStorage
	Publisher         *publisher.SQSPublisher
	Engine            *gin.Engine
}

type DynamoPrioritySQSIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	SQSContainer    *containers.SQSPriorityContainer
	Storage         *storage2.DynamoDBStorage
	Publisher       *publisher.SQSPublisher
	Engine          *gin.Engine
}

type PostgresPriorityRabbitMQIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	RabbitMQClient    *publisher.RabbitMQClient
	Storage           *storage.PostgresStorage
	Publisher         *publisher.RabbitMQPriorityPublisher
	Engine            *gin.Engine
}

type DynamoPriorityRabbitMQIntegrationTest struct {
	DynamoContainer   *containers.DynamoContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	RabbitMQClient    *publisher.RabbitMQClient
	Storage           *storage2.DynamoDBStorage
	Publisher         *publisher.RabbitMQPriorityPublisher
	Engine            *gin.Engine
}

func (it *PostgresPrioritySQSIntegrationTest) Cleanup() error {

	if err := it.PostgresContainer.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup postgres container - %w", err)
	}

	if err := it.SQSContainer.Container.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup sqs container - %w", err)
	}

	return nil
}

func (it *DynamoPrioritySQSIntegrationTest) Cleanup() error {

	if err := it.DynamoContainer.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup dynamo container - %w", err)
	}

	if err := it.SQSContainer.Container.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup sqs container - %w", err)
	}

	return nil
}

func (it *PostgresPriorityRabbitMQIntegrationTest) Cleanup() error {

	if err := it.PostgresContainer.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup postgres container - %w", err)
	}

	if err := it.RabbitMQClient.Close(); err != nil {
		return fmt.Errorf("failed to close rabbitmq connection - %w", err)
	}

	if err := it.RabbitMQContainer.Container.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup rabbitmq container - %w", err)
	}

	return nil
}

func (it *DynamoPriorityRabbitMQIntegrationTest) Cleanup() error {

	if err := it.DynamoContainer.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup dynamo container - %w", err)
	}

	if err := it.RabbitMQClient.Close(); err != nil {
		return fmt.Errorf("failed to close rabbitmq connection - %w", err)
	}

	if err := it.RabbitMQContainer.Container.Cleanup(); err != nil {
		return fmt.Errorf("failed to cleanup rabbitmq container - %w", err)
	}

	return nil
}

var DynamoSet = wire.NewSet(storage2.MakeDynamoDBClient, storage2.MakeDynamoDBStorage, wire.Bind(new(storage2.DynamoDBAPI), new(*dynamodb.Client)), wire.Bind(new(Storage), new(*storage2.DynamoDBStorage)))

var PostgresSet = wire.NewSet(storage.MakePostgresStorage, wire.Bind(new(Storage), new(*storage.PostgresStorage)))

var SQSPrioritySet = wire.NewSet(publisher.MakeSQSClient, publisher.MakeSQSPublisher, wire.Bind(new(publisher.SQSAPI), new(*sqs.Client)), wire.Bind(new(controllers.NotificationPublisher), new(*publisher.SQSPublisher)))

var RabbitMQPrioritySet = wire.NewSet(publisher.MakeRabbitMQClient, publisher.MakeRabbitMQPriorityPub, wire.Bind(new(publisher.RabbitMQAPI), new(*publisher.RabbitMQClient)), wire.Bind(new(controllers.NotificationPublisher), new(*publisher.RabbitMQPriorityPublisher)))

var PostgresContainerSet = wire.NewSet(containers.MakePostgresContainer, wire.Bind(new(storage.PostgresConfigurator), new(*containers.PostgresContainer)))

var SQSPriorityContainerSet = wire.NewSet(containers.MakeSQSPriorityContainer, wire.Bind(new(publisher.SQSConfigurator), new(*containers.SQSPriorityContainer)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*containers.SQSPriorityContainer)))

var RabbitMQPriorityContainerSet = wire.NewSet(containers.MakeRabbitMQPriorityContainer, wire.Bind(new(publisher.RabbitMQConfigurator), new(*containers.RabbitMQPriorityContainer)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*containers.RabbitMQPriorityContainer)))

var DynamoContainerSet = wire.NewSet(containers.MakeDynamoContainer, wire.Bind(new(storage2.DynamoConfigurator), new(*containers.DynamoContainer)))

var EnvConfigSet = wire.NewSet(config.MakeEnvConfig, wire.Bind(new(storage.PostgresConfigurator), new(*config.EnvConfig)), wire.Bind(new(storage2.DynamoConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.PriorityQueueConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.SQSConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.RabbitMQConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.RabbitMQPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(publisher.SQSPriorityConfigurator), new(*config.EnvConfig)))

func MakeEngine(storage3 Storage, pub controllers.NotificationPublisher) *gin.Engine {

	r := gin.Default()
	routes.SetupNotificationRoutes(r, storage3, pub)
	routes.SetupDistributionListRoutes(r, storage3)
	routes.SetupUsersRoutes(r, storage3)

	return r
}
