// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controllers/templates.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controllers/templates.go -destination=./internal/testutils/mocks/templates.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/notifique/service/internal/dto"
	dto0 "github.com/notifique/shared/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationTemplateRegistry is a mock of NotificationTemplateRegistry interface.
type MockNotificationTemplateRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationTemplateRegistryMockRecorder
	isgomock struct{}
}

// MockNotificationTemplateRegistryMockRecorder is the mock recorder for MockNotificationTemplateRegistry.
type MockNotificationTemplateRegistryMockRecorder struct {
	mock *MockNotificationTemplateRegistry
}

// NewMockNotificationTemplateRegistry creates a new mock instance.
func NewMockNotificationTemplateRegistry(ctrl *gomock.Controller) *MockNotificationTemplateRegistry {
	mock := &MockNotificationTemplateRegistry{ctrl: ctrl}
	mock.recorder = &MockNotificationTemplateRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationTemplateRegistry) EXPECT() *MockNotificationTemplateRegistryMockRecorder {
	return m.recorder
}

// DeleteTemplate mocks base method.
func (m *MockNotificationTemplateRegistry) DeleteTemplate(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockNotificationTemplateRegistryMockRecorder) DeleteTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockNotificationTemplateRegistry)(nil).DeleteTemplate), ctx, id)
}

// GetTemplateDetails mocks base method.
func (m *MockNotificationTemplateRegistry) GetTemplateDetails(ctx context.Context, id string) (dto0.NotificationTemplateDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateDetails", ctx, id)
	ret0, _ := ret[0].(dto0.NotificationTemplateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateDetails indicates an expected call of GetTemplateDetails.
func (mr *MockNotificationTemplateRegistryMockRecorder) GetTemplateDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateDetails", reflect.TypeOf((*MockNotificationTemplateRegistry)(nil).GetTemplateDetails), ctx, id)
}

// GetTemplates mocks base method.
func (m *MockNotificationTemplateRegistry) GetTemplates(ctx context.Context, filters dto.NotificationTemplateFilters) (dto0.Page[dto.NotificationTemplateInfoResp], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates", ctx, filters)
	ret0, _ := ret[0].(dto0.Page[dto.NotificationTemplateInfoResp])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates.
func (mr *MockNotificationTemplateRegistryMockRecorder) GetTemplates(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockNotificationTemplateRegistry)(nil).GetTemplates), ctx, filters)
}

// SaveTemplate mocks base method.
func (m *MockNotificationTemplateRegistry) SaveTemplate(ctx context.Context, createdBy string, ntr dto.NotificationTemplateReq) (dto.NotificationTemplateCreatedResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTemplate", ctx, createdBy, ntr)
	ret0, _ := ret[0].(dto.NotificationTemplateCreatedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTemplate indicates an expected call of SaveTemplate.
func (mr *MockNotificationTemplateRegistryMockRecorder) SaveTemplate(ctx, createdBy, ntr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTemplate", reflect.TypeOf((*MockNotificationTemplateRegistry)(nil).SaveTemplate), ctx, createdBy, ntr)
}
