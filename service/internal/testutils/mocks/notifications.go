// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controllers/notifications.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controllers/notifications.go -destination=./internal/testutils/mocks/notifications.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/notifique/service/internal/dto"
	dto0 "github.com/notifique/shared/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRegistry is a mock of NotificationRegistry interface.
type MockNotificationRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRegistryMockRecorder
	isgomock struct{}
}

// MockNotificationRegistryMockRecorder is the mock recorder for MockNotificationRegistry.
type MockNotificationRegistryMockRecorder struct {
	mock *MockNotificationRegistry
}

// NewMockNotificationRegistry creates a new mock instance.
func NewMockNotificationRegistry(ctrl *gomock.Controller) *MockNotificationRegistry {
	mock := &MockNotificationRegistry{ctrl: ctrl}
	mock.recorder = &MockNotificationRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRegistry) EXPECT() *MockNotificationRegistryMockRecorder {
	return m.recorder
}

// DeleteNotification mocks base method.
func (m *MockNotificationRegistry) DeleteNotification(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockNotificationRegistryMockRecorder) DeleteNotification(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockNotificationRegistry)(nil).DeleteNotification), ctx, id)
}

// GetNotification mocks base method.
func (m *MockNotificationRegistry) GetNotification(ctx context.Context, notificationId string) (dto.NotificationResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, notificationId)
	ret0, _ := ret[0].(dto.NotificationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationRegistryMockRecorder) GetNotification(ctx, notificationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationRegistry)(nil).GetNotification), ctx, notificationId)
}

// GetNotificationStatus mocks base method.
func (m *MockNotificationRegistry) GetNotificationStatus(ctx context.Context, notificationId string) (dto0.NotificationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatus", ctx, notificationId)
	ret0, _ := ret[0].(dto0.NotificationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatus indicates an expected call of GetNotificationStatus.
func (mr *MockNotificationRegistryMockRecorder) GetNotificationStatus(ctx, notificationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatus", reflect.TypeOf((*MockNotificationRegistry)(nil).GetNotificationStatus), ctx, notificationId)
}

// GetNotifications mocks base method.
func (m *MockNotificationRegistry) GetNotifications(ctx context.Context, filters dto0.PageFilter) (dto0.Page[dto.NotificationSummary], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, filters)
	ret0, _ := ret[0].(dto0.Page[dto.NotificationSummary])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockNotificationRegistryMockRecorder) GetNotifications(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationRegistry)(nil).GetNotifications), ctx, filters)
}

// GetRecipientNotificationStatuses mocks base method.
func (m *MockNotificationRegistry) GetRecipientNotificationStatuses(ctx context.Context, notificationId string, filters dto0.NotificationRecipientStatusFilters) (dto0.Page[dto0.RecipientNotificationStatus], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientNotificationStatuses", ctx, notificationId, filters)
	ret0, _ := ret[0].(dto0.Page[dto0.RecipientNotificationStatus])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipientNotificationStatuses indicates an expected call of GetRecipientNotificationStatuses.
func (mr *MockNotificationRegistryMockRecorder) GetRecipientNotificationStatuses(ctx, notificationId, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientNotificationStatuses", reflect.TypeOf((*MockNotificationRegistry)(nil).GetRecipientNotificationStatuses), ctx, notificationId, filters)
}

// GetTemplateVariables mocks base method.
func (m *MockNotificationRegistry) GetTemplateVariables(ctx context.Context, templateId string) ([]dto0.TemplateVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateVariables", ctx, templateId)
	ret0, _ := ret[0].([]dto0.TemplateVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateVariables indicates an expected call of GetTemplateVariables.
func (mr *MockNotificationRegistryMockRecorder) GetTemplateVariables(ctx, templateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateVariables", reflect.TypeOf((*MockNotificationRegistry)(nil).GetTemplateVariables), ctx, templateId)
}

// SaveNotification mocks base method.
func (m *MockNotificationRegistry) SaveNotification(ctx context.Context, createdBy string, notification dto0.NotificationReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNotification", ctx, createdBy, notification)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNotification indicates an expected call of SaveNotification.
func (mr *MockNotificationRegistryMockRecorder) SaveNotification(ctx, createdBy, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotification", reflect.TypeOf((*MockNotificationRegistry)(nil).SaveNotification), ctx, createdBy, notification)
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationRegistry) UpdateNotificationStatus(ctx context.Context, statusLog dto0.NotificationStatusLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, statusLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationRegistryMockRecorder) UpdateNotificationStatus(ctx, statusLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationRegistry)(nil).UpdateNotificationStatus), ctx, statusLog)
}

// UpsertRecipientNotificationStatuses mocks base method.
func (m *MockNotificationRegistry) UpsertRecipientNotificationStatuses(ctx context.Context, notificationId string, statuses []dto0.RecipientNotificationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRecipientNotificationStatuses", ctx, notificationId, statuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRecipientNotificationStatuses indicates an expected call of UpsertRecipientNotificationStatuses.
func (mr *MockNotificationRegistryMockRecorder) UpsertRecipientNotificationStatuses(ctx, notificationId, statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRecipientNotificationStatuses", reflect.TypeOf((*MockNotificationRegistry)(nil).UpsertRecipientNotificationStatuses), ctx, notificationId, statuses)
}

// MockNotificationPublisher is a mock of NotificationPublisher interface.
type MockNotificationPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationPublisherMockRecorder
	isgomock struct{}
}

// MockNotificationPublisherMockRecorder is the mock recorder for MockNotificationPublisher.
type MockNotificationPublisherMockRecorder struct {
	mock *MockNotificationPublisher
}

// NewMockNotificationPublisher creates a new mock instance.
func NewMockNotificationPublisher(ctrl *gomock.Controller) *MockNotificationPublisher {
	mock := &MockNotificationPublisher{ctrl: ctrl}
	mock.recorder = &MockNotificationPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationPublisher) EXPECT() *MockNotificationPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNotificationPublisher) Publish(ctx context.Context, notification dto0.NotificationMsgPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNotificationPublisherMockRecorder) Publish(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotificationPublisher)(nil).Publish), ctx, notification)
}
