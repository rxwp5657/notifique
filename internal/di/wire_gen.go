// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/notifique/internal/broker"
	"github.com/notifique/internal/cache"
	"github.com/notifique/internal/config"
	"github.com/notifique/internal/controllers"
	"github.com/notifique/internal/deployments"
	"github.com/notifique/internal/publish"
	"github.com/notifique/internal/registry/dynamodb"
	"github.com/notifique/internal/registry/postgres"
	"github.com/notifique/internal/routes"
	"github.com/notifique/internal/testutils/config"
	"github.com/notifique/internal/testutils/containers"
	"github.com/notifique/internal/testutils/mocks"
	"github.com/redis/go-redis/v9"
	"go.uber.org/mock/gomock"
)

// Injectors from wire.go:

func InjectPgPrioritySQS(envfile *string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := cache.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	registry, err := postgresresgistry.NewPostgresRegistry(envConfig)
	if err != nil {
		return nil, err
	}
	redisCache, err := cache.NewRedisCache(client)
	if err != nil {
		return nil, err
	}
	sqsClient, err := publish.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(sqsClient)
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         sqsPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: envConfig,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	redis, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		return nil, err
	}
	engineConfig := routes.EngineConfig{
		RedisClient:        client,
		Registry:           registry,
		Cache:              redisCache,
		Publisher:          priorityPublisher,
		Broker:             redis,
		EngineConfigurator: envConfig,
	}
	engine, err := routes.NewEngine(engineConfig)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

func InjectPgPriorityRabbitMQ(envfile *string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	client, err := cache.NewRedisClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	registry, err := postgresresgistry.NewPostgresRegistry(envConfig)
	if err != nil {
		return nil, nil, err
	}
	redisCache, err := cache.NewRedisCache(client)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQClient, cleanup, err := publish.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         rabbitMQPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: envConfig,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	redis, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engineConfig := routes.EngineConfig{
		RedisClient:        client,
		Registry:           registry,
		Cache:              redisCache,
		Publisher:          priorityPublisher,
		Broker:             redis,
		EngineConfigurator: envConfig,
	}
	engine, err := routes.NewEngine(engineConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return engine, func() {
		cleanup()
	}, nil
}

func InjectDynamoPrioritySQS(envfile *string) (*gin.Engine, error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, err
	}
	client, err := cache.NewRedisClient(envConfig)
	if err != nil {
		return nil, err
	}
	dynamodbClient, err := dynamoregistry.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, err
	}
	registry := dynamoregistry.NewDynamoDBRegistry(dynamodbClient)
	redisCache, err := cache.NewRedisCache(client)
	if err != nil {
		return nil, err
	}
	sqsClient, err := publish.NewSQSClient(envConfig)
	if err != nil {
		return nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(sqsClient)
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         sqsPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: envConfig,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	redis, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		return nil, err
	}
	engineConfig := routes.EngineConfig{
		RedisClient:        client,
		Registry:           registry,
		Cache:              redisCache,
		Publisher:          priorityPublisher,
		Broker:             redis,
		EngineConfigurator: envConfig,
	}
	engine, err := routes.NewEngine(engineConfig)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

func InjectDynamoPriorityRabbitMQ(envfile *string) (*gin.Engine, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	client, err := cache.NewRedisClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	dynamodbClient, err := dynamoregistry.NewDynamoDBClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	registry := dynamoregistry.NewDynamoDBRegistry(dynamodbClient)
	redisCache, err := cache.NewRedisCache(client)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQClient, cleanup, err := publish.NewRabbitMQClient(envConfig)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         rabbitMQPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: envConfig,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	redis, err := broker.NewRedisBroker(client, envConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engineConfig := routes.EngineConfig{
		RedisClient:        client,
		Registry:           registry,
		Cache:              redisCache,
		Publisher:          priorityPublisher,
		Broker:             redis,
		EngineConfigurator: envConfig,
	}
	engine, err := routes.NewEngine(engineConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return engine, func() {
		cleanup()
	}, nil
}

func InjectPgSQSPriorityIntegrationTest(ctx context.Context) (*PgSQSPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityContainer, cleanup2, err := containers.NewSQSPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisContainer, cleanup3, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	registry, err := postgresresgistry.NewPostgresRegistry(postgresContainer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, err := publish.NewSQSClient(sqsPriorityContainer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sqsPublisher := publish.NewSQSPublisher(client)
	redisClient, err := cache.NewRedisClient(redisContainer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redisCache, err := cache.NewRedisCache(redisClient)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         sqsPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: sqsPriorityContainer,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	pgSQSPriorityIntegrationTest := &PgSQSPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		SQSContainer:      sqsPriorityContainer,
		RedisContainer:    redisContainer,
		Registry:          registry,
		Publisher:         priorityPublisher,
		Cache:             redisCache,
	}
	return pgSQSPriorityIntegrationTest, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectPgRabbitMQPriorityIntegrationTest(ctx context.Context) (*PgRabbitMQPriorityIntegrationTest, func(), error) {
	postgresContainer, cleanup, err := containers.NewPostgresContainer(ctx)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityContainer, cleanup2, err := containers.NewRabbitMQPriorityContainer(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisContainer, cleanup3, err := containers.NewRedisContainer(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	registry, err := postgresresgistry.NewPostgresRegistry(postgresContainer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQClient, cleanup4, err := publish.NewRabbitMQClient(rabbitMQPriorityContainer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rabbitMQPublisher := publish.NewRabbitMQPublisher(rabbitMQClient)
	client, err := cache.NewRedisClient(redisContainer)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redisCache, err := cache.NewRedisCache(client)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	priorityPublisherCfg := publish.PriorityPublisherCfg{
		Publisher:         rabbitMQPublisher,
		Cache:             redisCache,
		Registry:          registry,
		QueueConfigurator: rabbitMQPriorityContainer,
	}
	priorityPublisher := publish.NewPriorityPublisher(priorityPublisherCfg)
	pgRabbitMQPriorityIntegrationTest := &PgRabbitMQPriorityIntegrationTest{
		PostgresContainer: postgresContainer,
		RabbitMQContainer: rabbitMQPriorityContainer,
		RedisContainer:    redisContainer,
		Registry:          registry,
		Publisher:         priorityPublisher,
		Cache:             redisCache,
	}
	return pgRabbitMQPriorityIntegrationTest, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InjectMockedBackend(ctx context.Context, mockController *gomock.Controller) (*MockedBackend, error) {
	mockDistributionRegistry := mock_controllers.NewMockDistributionRegistry(mockController)
	mockUserRegistry := mock_controllers.NewMockUserRegistry(mockController)
	mockNotificationRegistry := mock_controllers.NewMockNotificationRegistry(mockController)
	mockNotificationTemplateRegistry := mock_controllers.NewMockNotificationTemplateRegistry(mockController)
	mockedRegistry := mock_controllers.NewMockedRegistry(mockDistributionRegistry, mockUserRegistry, mockNotificationRegistry, mockNotificationTemplateRegistry)
	mockNotificationPublisher := mock_controllers.NewMockNotificationPublisher(mockController)
	mockUserNotificationBroker := mock_controllers.NewMockUserNotificationBroker(mockController)
	mockNotificationCache := mock_controllers.NewMockNotificationCache(mockController)
	client := _wireClientValue
	testEngineConfigurator := config_test.NewTestVersionConfigurator()
	engineConfig := routes.EngineConfig{
		RedisClient:        client,
		Registry:           mockedRegistry,
		Cache:              mockNotificationCache,
		Publisher:          mockNotificationPublisher,
		Broker:             mockUserNotificationBroker,
		EngineConfigurator: testEngineConfigurator,
	}
	engine, err := routes.NewEngine(engineConfig)
	if err != nil {
		return nil, err
	}
	mockedBackend := &MockedBackend{
		Registry:  mockedRegistry,
		Publisher: mockNotificationPublisher,
		Broker:    mockUserNotificationBroker,
		Cache:     mockNotificationCache,
		Engine:    engine,
	}
	return mockedBackend, nil
}

var (
	_wireClientValue = (*redis.Client)(nil)
)

func InjectRabbitMQPriorityDeployer(envfile *string) (*deployments.RabbitMQPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	rabbitMQPriorityDeployer, cleanup, err := deployments.NewRabbitMQPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return rabbitMQPriorityDeployer, func() {
		cleanup()
	}, nil
}

func InjectSQSPriorityDeployer(envfile *string) (*deployments.SQSPriorityDeployer, func(), error) {
	envConfig, err := config.NewEnvConfig(envfile)
	if err != nil {
		return nil, nil, err
	}
	sqsPriorityDeployer, err := deployments.NewSQSPriorityDeployer(envConfig)
	if err != nil {
		return nil, nil, err
	}
	return sqsPriorityDeployer, func() {
	}, nil
}

// wire.go:

type PostgresMockedPubIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RedisContainer    *containers.RedisContainer
	Registry          *postgresresgistry.Registry
	Publisher         *mock_controllers.MockNotificationPublisher
	Broker            *broker.Redis
	Engine            *gin.Engine
}

type DynamoMockedPubIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	RedisContainer  *containers.RedisContainer
	Registry        *dynamoregistry.Registry
	Publisher       *mock_controllers.MockNotificationPublisher
	Broker          *broker.Redis
	Engine          *gin.Engine
}

type PgSQSPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	SQSContainer      *containers.SQSPriorityContainer
	RedisContainer    *containers.RedisContainer
	Registry          *postgresresgistry.Registry
	Publisher         *publish.PriorityPublisher
	Cache             *cache.RedisCache
}

type PgRabbitMQPriorityIntegrationTest struct {
	PostgresContainer *containers.PostgresContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	RedisContainer    *containers.RedisContainer
	Registry          *postgresresgistry.Registry
	Publisher         *publish.PriorityPublisher
	Cache             *cache.RedisCache
}

type DynamoSQSPriorityIntegrationTest struct {
	DynamoContainer *containers.DynamoContainer
	SQSContainer    *containers.SQSPriorityContainer
	Registry        *dynamoregistry.Registry
	Publisher       *publish.PriorityPublisher
}

type DynamoRabbitMQPriorityIntegrationTest struct {
	DynamoContainer   *containers.DynamoContainer
	RabbitMQContainer *containers.RabbitMQPriorityContainer
	Registry          *dynamoregistry.Registry
	Publisher         *publish.PriorityPublisher
}

type MockedBackend struct {
	Registry  *mock_controllers.MockedRegistry
	Publisher *mock_controllers.MockNotificationPublisher
	Broker    *mock_controllers.MockUserNotificationBroker
	Cache     *mock_controllers.MockNotificationCache
	Engine    *gin.Engine
}

var DynamoSet = wire.NewSet(dynamoregistry.NewDynamoDBClient, dynamoregistry.NewDynamoDBRegistry, wire.Bind(new(dynamoregistry.DynamoDBAPI), new(*dynamodb.Client)), wire.Bind(new(routes.Registry), new(*dynamoregistry.Registry)), wire.Bind(new(controllers.NotificationRegistry), new(*dynamoregistry.Registry)))

var PostgresSet = wire.NewSet(postgresresgistry.NewPostgresRegistry, wire.Bind(new(routes.Registry), new(*postgresresgistry.Registry)), wire.Bind(new(controllers.NotificationRegistry), new(*postgresresgistry.Registry)))

var SQSPublisherSet = wire.NewSet(publish.NewSQSClient, publish.NewSQSPublisher, wire.Bind(new(publish.SQSAPI), new(*sqs.Client)), wire.Bind(new(publish.Publisher), new(*publish.SQSPublisher)))

var RabbitMQPublisherSet = wire.NewSet(publish.NewRabbitMQClient, publish.NewRabbitMQPublisher, wire.Bind(new(publish.RabbitMQAPI), new(*publish.RabbitMQClient)), wire.Bind(new(publish.Publisher), new(*publish.RabbitMQPublisher)))

var PriorityPublisherCfgSet = wire.NewSet(wire.Struct(new(publish.PriorityPublisherCfg), "*"))

var RedisSet = wire.NewSet(cache.NewRedisClient, wire.Bind(new(cache.CacheRedisApi), new(*redis.Client)), wire.Bind(new(broker.BrokerRedisApi), new(*redis.Client)))

var RedisCacheSet = wire.NewSet(cache.NewRedisCache, wire.Bind(new(controllers.NotificationCache), new(*cache.RedisCache)), wire.Bind(new(routes.Cache), new(*cache.RedisCache)))

var RedisUserNotificationBrokerSet = wire.NewSet(broker.NewRedisBroker, wire.Bind(new(controllers.UserNotificationBroker), new(*broker.Redis)))

var PrioritySet = wire.NewSet(
	PriorityPublisherCfgSet, publish.NewPriorityPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*publish.PriorityPublisher)),
)

var PostgresContainerSet = wire.NewSet(containers.NewPostgresContainer, wire.Bind(new(postgresresgistry.PostgresConfigurator), new(*containers.PostgresContainer)))

var SQSPriorityContainerSet = wire.NewSet(containers.NewSQSPriorityContainer, wire.Bind(new(publish.SQSConfigurator), new(*containers.SQSPriorityContainer)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*containers.SQSPriorityContainer)))

var RabbitMQPriorityContainerSet = wire.NewSet(containers.NewRabbitMQPriorityContainer, wire.Bind(new(publish.RabbitMQConfigurator), new(*containers.RabbitMQPriorityContainer)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*containers.RabbitMQPriorityContainer)))

var DynamoContainerSet = wire.NewSet(containers.NewDynamoContainer, wire.Bind(new(dynamoregistry.DynamoConfigurator), new(*containers.DynamoContainer)))

var RedisContainerSet = wire.NewSet(containers.NewRedisContainer, wire.Bind(new(cache.RedisConfigurator), new(*containers.RedisContainer)), wire.Bind(new(broker.BrokerConfigurator), new(*containers.RedisContainer)))

var MockedPublihserSet = wire.NewSet(mock_controllers.NewMockNotificationPublisher, wire.Bind(new(controllers.NotificationPublisher), new(*mock_controllers.MockNotificationPublisher)))

var MockedDistributionRegistrySet = wire.NewSet(mock_controllers.NewMockDistributionRegistry, wire.Bind(new(controllers.DistributionRegistry), new(*mock_controllers.MockDistributionRegistry)))

var MockedUserRegistrySet = wire.NewSet(mock_controllers.NewMockUserRegistry, wire.Bind(new(controllers.UserRegistry), new(*mock_controllers.MockUserRegistry)))

var MockedNotificationRegistrySet = wire.NewSet(mock_controllers.NewMockNotificationRegistry, wire.Bind(new(controllers.NotificationRegistry), new(*mock_controllers.MockNotificationRegistry)))

var MockedNotificationTemplateRegistrySet = wire.NewSet(mock_controllers.NewMockNotificationTemplateRegistry, wire.Bind(new(controllers.NotificationTemplateRegistry), new(*mock_controllers.MockNotificationTemplateRegistry)))

var MockedUserNotificationBroker = wire.NewSet(mock_controllers.NewMockUserNotificationBroker, wire.Bind(new(controllers.UserNotificationBroker), new(*mock_controllers.MockUserNotificationBroker)))

var MockedRegistrySet = wire.NewSet(
	MockedDistributionRegistrySet,
	MockedUserRegistrySet,
	MockedNotificationRegistrySet,
	MockedNotificationTemplateRegistrySet, mock_controllers.NewMockedRegistry, wire.Bind(new(routes.Registry), new(*mock_controllers.MockedRegistry)),
)

var TestVersionConfiguratorSet = wire.NewSet(config_test.NewTestVersionConfigurator, wire.Bind(new(routes.EngineConfigurator), new(config_test.TestEngineConfigurator)))

var EnvConfigSet = wire.NewSet(config.NewEnvConfig, wire.Bind(new(postgresresgistry.PostgresConfigurator), new(*config.EnvConfig)), wire.Bind(new(dynamoregistry.DynamoConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.PriorityQueueConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.SQSConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.RabbitMQConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.RabbitMQPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(publish.SQSPriorityConfigurator), new(*config.EnvConfig)), wire.Bind(new(cache.RedisConfigurator), new(*config.EnvConfig)), wire.Bind(new(broker.BrokerConfigurator), new(*config.EnvConfig)), wire.Bind(new(routes.EngineConfigurator), new(*config.EnvConfig)))

var MockedNotificationCacheSet = wire.NewSet(mock_controllers.NewMockNotificationCache, wire.Bind(new(routes.Cache), new(*mock_controllers.MockNotificationCache)))

var EngineConfigSet = wire.NewSet(wire.Struct(new(routes.EngineConfig), "*"))
