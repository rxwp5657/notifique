// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/controllers/templates.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/controllers/templates.go -destination=./internal/testutils/mocks/templates.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/notifique/internal/server/dto"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockNotificationTemplateRegistry is a mock of NotificationTemplateRegistry interface.
type MockNotificationTemplateRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationTemplateRegistryMockRecorder
	isgomock struct{}
}

// MockNotificationTemplateRegistryMockRecorder is the mock recorder for MockNotificationTemplateRegistry.
type MockNotificationTemplateRegistryMockRecorder struct {
	mock *MockNotificationTemplateRegistry
}

// NewMockNotificationTemplateRegistry creates a new mock instance.
func NewMockNotificationTemplateRegistry(ctrl *gomock.Controller) *MockNotificationTemplateRegistry {
	mock := &MockNotificationTemplateRegistry{ctrl: ctrl}
	mock.recorder = &MockNotificationTemplateRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationTemplateRegistry) EXPECT() *MockNotificationTemplateRegistryMockRecorder {
	return m.recorder
}

// SaveTemplate mocks base method.
func (m *MockNotificationTemplateRegistry) SaveTemplate(ctx context.Context, createdBy string, ntr dto.NotificationTemplateReq) (dto.NotificationTemplateCreatedResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTemplate", ctx, createdBy, ntr)
	ret0, _ := ret[0].(dto.NotificationTemplateCreatedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTemplate indicates an expected call of SaveTemplate.
func (mr *MockNotificationTemplateRegistryMockRecorder) SaveTemplate(ctx, createdBy, ntr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTemplate", reflect.TypeOf((*MockNotificationTemplateRegistry)(nil).SaveTemplate), ctx, createdBy, ntr)
}
