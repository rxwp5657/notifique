// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/controllers/distribution_lists.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/controllers/distribution_lists.go -destination=./internal/testutils/mocks/distribution_lists.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/notifique/internal/server/dto"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockDistributionRegistry is a mock of DistributionRegistry interface.
type MockDistributionRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockDistributionRegistryMockRecorder
	isgomock struct{}
}

// MockDistributionRegistryMockRecorder is the mock recorder for MockDistributionRegistry.
type MockDistributionRegistryMockRecorder struct {
	mock *MockDistributionRegistry
}

// NewMockDistributionRegistry creates a new mock instance.
func NewMockDistributionRegistry(ctrl *gomock.Controller) *MockDistributionRegistry {
	mock := &MockDistributionRegistry{ctrl: ctrl}
	mock.recorder = &MockDistributionRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributionRegistry) EXPECT() *MockDistributionRegistryMockRecorder {
	return m.recorder
}

// AddRecipients mocks base method.
func (m *MockDistributionRegistry) AddRecipients(ctx context.Context, distlistName string, recipients []string) (*dto.DistributionListSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecipients", ctx, distlistName, recipients)
	ret0, _ := ret[0].(*dto.DistributionListSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecipients indicates an expected call of AddRecipients.
func (mr *MockDistributionRegistryMockRecorder) AddRecipients(ctx, distlistName, recipients any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecipients", reflect.TypeOf((*MockDistributionRegistry)(nil).AddRecipients), ctx, distlistName, recipients)
}

// CreateDistributionList mocks base method.
func (m *MockDistributionRegistry) CreateDistributionList(ctx context.Context, distributionList dto.DistributionList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionList", ctx, distributionList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistributionList indicates an expected call of CreateDistributionList.
func (mr *MockDistributionRegistryMockRecorder) CreateDistributionList(ctx, distributionList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionList", reflect.TypeOf((*MockDistributionRegistry)(nil).CreateDistributionList), ctx, distributionList)
}

// DeleteDistributionList mocks base method.
func (m *MockDistributionRegistry) DeleteDistributionList(ctx context.Context, distlistName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistributionList", ctx, distlistName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDistributionList indicates an expected call of DeleteDistributionList.
func (mr *MockDistributionRegistryMockRecorder) DeleteDistributionList(ctx, distlistName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistributionList", reflect.TypeOf((*MockDistributionRegistry)(nil).DeleteDistributionList), ctx, distlistName)
}

// DeleteRecipients mocks base method.
func (m *MockDistributionRegistry) DeleteRecipients(ctx context.Context, distlistName string, recipients []string) (*dto.DistributionListSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipients", ctx, distlistName, recipients)
	ret0, _ := ret[0].(*dto.DistributionListSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipients indicates an expected call of DeleteRecipients.
func (mr *MockDistributionRegistryMockRecorder) DeleteRecipients(ctx, distlistName, recipients any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipients", reflect.TypeOf((*MockDistributionRegistry)(nil).DeleteRecipients), ctx, distlistName, recipients)
}

// GetDistributionLists mocks base method.
func (m *MockDistributionRegistry) GetDistributionLists(ctx context.Context, filter dto.PageFilter) (dto.Page[dto.DistributionListSummary], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionLists", ctx, filter)
	ret0, _ := ret[0].(dto.Page[dto.DistributionListSummary])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionLists indicates an expected call of GetDistributionLists.
func (mr *MockDistributionRegistryMockRecorder) GetDistributionLists(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionLists", reflect.TypeOf((*MockDistributionRegistry)(nil).GetDistributionLists), ctx, filter)
}

// GetRecipients mocks base method.
func (m *MockDistributionRegistry) GetRecipients(ctx context.Context, distlistName string, filter dto.PageFilter) (dto.Page[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipients", ctx, distlistName, filter)
	ret0, _ := ret[0].(dto.Page[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipients indicates an expected call of GetRecipients.
func (mr *MockDistributionRegistryMockRecorder) GetRecipients(ctx, distlistName, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipients", reflect.TypeOf((*MockDistributionRegistry)(nil).GetRecipients), ctx, distlistName, filter)
}
