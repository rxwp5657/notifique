// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/controllers/notifications.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/controllers/notifications.go -destination=./internal/testutils/mocks/notifications.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	context "context"
	reflect "reflect"

	controllers "github.com/notifique/internal/server/controllers"
	dto "github.com/notifique/internal/server/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRegistry is a mock of NotificationRegistry interface.
type MockNotificationRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRegistryMockRecorder
	isgomock struct{}
}

// MockNotificationRegistryMockRecorder is the mock recorder for MockNotificationRegistry.
type MockNotificationRegistryMockRecorder struct {
	mock *MockNotificationRegistry
}

// NewMockNotificationRegistry creates a new mock instance.
func NewMockNotificationRegistry(ctrl *gomock.Controller) *MockNotificationRegistry {
	mock := &MockNotificationRegistry{ctrl: ctrl}
	mock.recorder = &MockNotificationRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRegistry) EXPECT() *MockNotificationRegistryMockRecorder {
	return m.recorder
}

// DeleteNotification mocks base method.
func (m *MockNotificationRegistry) DeleteNotification(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockNotificationRegistryMockRecorder) DeleteNotification(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockNotificationRegistry)(nil).DeleteNotification), ctx, id)
}

// GetNotificationStatus mocks base method.
func (m *MockNotificationRegistry) GetNotificationStatus(ctx context.Context, notificationId string) (dto.NotificationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatus", ctx, notificationId)
	ret0, _ := ret[0].(dto.NotificationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatus indicates an expected call of GetNotificationStatus.
func (mr *MockNotificationRegistryMockRecorder) GetNotificationStatus(ctx, notificationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatus", reflect.TypeOf((*MockNotificationRegistry)(nil).GetNotificationStatus), ctx, notificationId)
}

// GetNotifications mocks base method.
func (m *MockNotificationRegistry) GetNotifications(ctx context.Context, filters dto.PageFilter) (dto.Page[dto.NotificationSummary], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, filters)
	ret0, _ := ret[0].(dto.Page[dto.NotificationSummary])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockNotificationRegistryMockRecorder) GetNotifications(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationRegistry)(nil).GetNotifications), ctx, filters)
}

// GetTemplateVariables mocks base method.
func (m *MockNotificationRegistry) GetTemplateVariables(ctx context.Context, templateId string) ([]dto.TemplateVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateVariables", ctx, templateId)
	ret0, _ := ret[0].([]dto.TemplateVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateVariables indicates an expected call of GetTemplateVariables.
func (mr *MockNotificationRegistryMockRecorder) GetTemplateVariables(ctx, templateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateVariables", reflect.TypeOf((*MockNotificationRegistry)(nil).GetTemplateVariables), ctx, templateId)
}

// SaveNotification mocks base method.
func (m *MockNotificationRegistry) SaveNotification(ctx context.Context, createdBy string, notification dto.NotificationReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNotification", ctx, createdBy, notification)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNotification indicates an expected call of SaveNotification.
func (mr *MockNotificationRegistryMockRecorder) SaveNotification(ctx, createdBy, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotification", reflect.TypeOf((*MockNotificationRegistry)(nil).SaveNotification), ctx, createdBy, notification)
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationRegistry) UpdateNotificationStatus(ctx context.Context, statusLog controllers.NotificationStatusLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, statusLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationRegistryMockRecorder) UpdateNotificationStatus(ctx, statusLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationRegistry)(nil).UpdateNotificationStatus), ctx, statusLog)
}

// MockNotificationPublisher is a mock of NotificationPublisher interface.
type MockNotificationPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationPublisherMockRecorder
	isgomock struct{}
}

// MockNotificationPublisherMockRecorder is the mock recorder for MockNotificationPublisher.
type MockNotificationPublisherMockRecorder struct {
	mock *MockNotificationPublisher
}

// NewMockNotificationPublisher creates a new mock instance.
func NewMockNotificationPublisher(ctrl *gomock.Controller) *MockNotificationPublisher {
	mock := &MockNotificationPublisher{ctrl: ctrl}
	mock.recorder = &MockNotificationPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationPublisher) EXPECT() *MockNotificationPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNotificationPublisher) Publish(ctx context.Context, notification controllers.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNotificationPublisherMockRecorder) Publish(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotificationPublisher)(nil).Publish), ctx, notification)
}

// MockNotificationCache is a mock of NotificationCache interface.
type MockNotificationCache struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationCacheMockRecorder
	isgomock struct{}
}

// MockNotificationCacheMockRecorder is the mock recorder for MockNotificationCache.
type MockNotificationCacheMockRecorder struct {
	mock *MockNotificationCache
}

// NewMockNotificationCache creates a new mock instance.
func NewMockNotificationCache(ctrl *gomock.Controller) *MockNotificationCache {
	mock := &MockNotificationCache{ctrl: ctrl}
	mock.recorder = &MockNotificationCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationCache) EXPECT() *MockNotificationCacheMockRecorder {
	return m.recorder
}

// GetNotificationStatus mocks base method.
func (m *MockNotificationCache) GetNotificationStatus(ctx context.Context, notificationId string) (*dto.NotificationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatus", ctx, notificationId)
	ret0, _ := ret[0].(*dto.NotificationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatus indicates an expected call of GetNotificationStatus.
func (mr *MockNotificationCacheMockRecorder) GetNotificationStatus(ctx, notificationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatus", reflect.TypeOf((*MockNotificationCache)(nil).GetNotificationStatus), ctx, notificationId)
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationCache) UpdateNotificationStatus(ctx context.Context, statusLog controllers.NotificationStatusLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, statusLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationCacheMockRecorder) UpdateNotificationStatus(ctx, statusLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationCache)(nil).UpdateNotificationStatus), ctx, statusLog)
}
